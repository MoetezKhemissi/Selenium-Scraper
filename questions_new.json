[
    {
        "id": 1,
        "title": "Two Sum",
        "difficulty": "Easy",
        "acceptance": "53.9%",
        "constraints": [
            "2 <= nums.length <= 104",
            "-109 <= nums[i] <= 109",
            "-109 <= target <= 109",
            "Only one valid answer exists.",
            "Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?"
        ],
        "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nYou can return the answer in any order.",
        "examples": [
            {
                "input": "nums = [2,7,11,15], target = 9",
                "output": "[0,1]",
                "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."
            },
            {
                "input": "nums = [3,2,4], target = 6",
                "output": "[1,2]",
                "explanation": ""
            },
            {
                "input": "nums = [3,3], target = 6",
                "output": "[0,1]",
                "explanation": ""
            }
        ],
        "hints": [
            "A really brute force way would be to search for all possible pairs of numbers but that would be too slow. Again, it's best to try out brute force solutions for just for completeness. It is from these brute force solutions that you can come up with optimizations.",
            "So, if we fix one of the numbers, say x, we have to scan the entire array to find the next number y which is value - x where value is the input parameter. Can we change our array somehow so that this search becomes faster?",
            "The second train of thought is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?"
        ],
        "topics": [
            "array",
            "hash-table"
        ]
    },
    {
        "id": 2,
        "title": "Add Two Numbers",
        "difficulty": "Medium",
        "acceptance": "44.3%",
        "constraints": [
            "The number of nodes in each linked list is in the range [1, 100].",
            "0 <= Node.val <= 9",
            "It is guaranteed that the list represents a number that does not have leading zeros."
        ],
        "description": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.",
        "examples": [
            {
                "input": "l1 = [2,4,3], l2 = [5,6,4]",
                "output": "[7,0,8]",
                "explanation": "342 + 465 = 807."
            },
            {
                "input": "l1 = [0], l2 = [0]",
                "output": "[0]",
                "explanation": ""
            },
            {
                "input": "l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]",
                "output": "[8,9,9,9,0,0,0,1]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "linked-list",
            "math",
            "recursion"
        ]
    },
    {
        "id": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": "Medium",
        "acceptance": "35.6%",
        "constraints": [
            "0 <= s.length <= 5 * 104",
            "s consists of English letters, digits, symbols and spaces."
        ],
        "description": "Given a string s, find the length of the longest\nsubstring\nwithout repeating characters.",
        "examples": [
            {
                "input": "s = \"abcabcbb\"",
                "output": "3",
                "explanation": "The answer is \"abc\", with the length of 3."
            },
            {
                "input": "s = \"bbbbb\"",
                "output": "1",
                "explanation": "The answer is \"b\", with the length of 1."
            },
            {
                "input": "s = \"pwwkew\"",
                "output": "3",
                "explanation": "The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring."
            }
        ],
        "hints": [
            "Generate all possible substrings & check for each substring if it's valid and keep updating maxLen accordingly."
        ],
        "topics": [
            "hash-table",
            "string",
            "sliding-window"
        ]
    },
    {
        "id": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": "Hard",
        "acceptance": "41.7%",
        "constraints": [
            "nums1.length == m",
            "nums2.length == n",
            "0 <= m <= 1000",
            "0 <= n <= 1000",
            "1 <= m + n <= 2000",
            "-106 <= nums1[i], nums2[i] <= 106"
        ],
        "description": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\nThe overall run time complexity should be O(log (m+n)).",
        "examples": [
            {
                "input": "nums1 = [1,3], nums2 = [2]",
                "output": "2.00000",
                "explanation": "merged array = [1,2,3] and median is 2."
            },
            {
                "input": "nums1 = [1,2], nums2 = [3,4]",
                "output": "2.50000",
                "explanation": "merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5."
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "binary-search",
            "divide-and-conquer"
        ]
    },
    {
        "id": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": "Medium",
        "acceptance": "34.6%",
        "constraints": [
            "1 <= s.length <= 1000",
            "s consist of only digits and English letters."
        ],
        "description": "Given a string s, return the longest\npalindromic\nsubstring\nin s.",
        "examples": [
            {
                "input": "s = \"babad\"",
                "output": "\"bab\"",
                "explanation": "\"aba\" is also a valid answer."
            },
            {
                "input": "s = \"cbbd\"",
                "output": "\"bb\"",
                "explanation": ""
            }
        ],
        "hints": [
            "How can we reuse a previously computed palindrome to compute a larger palindrome?",
            "If “aba” is a palindrome, is “xabax” a palindrome? Similarly is “xabay” a palindrome?",
            "Complexity based hint:\nIf we use brute-force and check whether for every start and end position a substring is a palindrome we have O(n^2) start - end pairs and O(n) palindromic checks. Can we reduce the time for palindromic checks to O(1) by reusing some previous computation."
        ],
        "topics": [
            "two-pointers",
            "string",
            "dynamic-programming"
        ]
    },
    {
        "id": 6,
        "title": "Zigzag Conversion",
        "difficulty": "Medium",
        "acceptance": "49.5%",
        "constraints": [
            "1 <= s.length <= 1000",
            "s consists of English letters (lower-case and upper-case), ',' and '.'.",
            "1 <= numRows <= 1000"
        ],
        "description": "The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\nP   A   H   N\nA P L S I I G\nY   I   R\nAnd then read line by line: \"PAHNAPLSIIGYIR\"\nWrite the code that will take a string and make this conversion given a number of rows:\nstring convert(string s, int numRows);",
        "examples": [
            {
                "input": "s = \"PAYPALISHIRING\", numRows = 3",
                "output": "\"PAHNAPLSIIGYIR\"",
                "explanation": ""
            },
            {
                "input": "s = \"PAYPALISHIRING\", numRows = 4",
                "output": "\"PINALSIGYAHRPI\"",
                "explanation": "P     I    N\nA   L S  I G\nY A   H R\nP     I"
            },
            {
                "input": "s = \"A\", numRows = 1",
                "output": "\"A\"",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "string"
        ]
    },
    {
        "id": 7,
        "title": "Reverse Integer",
        "difficulty": "Medium",
        "acceptance": "29.2%",
        "constraints": [
            "-231 <= x <= 231 - 1"
        ],
        "description": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).",
        "examples": [
            {
                "input": "x = 123",
                "output": "321",
                "explanation": ""
            },
            {
                "input": "x = -123",
                "output": "-321",
                "explanation": ""
            },
            {
                "input": "x = 120",
                "output": "21",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "math"
        ]
    },
    {
        "id": 8,
        "title": "String to Integer (atoi)",
        "difficulty": "Medium",
        "acceptance": "18.0%",
        "constraints": [
            "0 <= s.length <= 200",
            "s consists of English letters (lower-case and upper-case), digits (0-9), ' ', '+', '-', and '.'."
        ],
        "description": "Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.\nThe algorithm for myAtoi(string s) is as follows:\nWhitespace: Ignore any leading whitespace (\" \").\nSignedness: Determine the sign by checking if the next character is '-' or '+', assuming positivity is neither present.\nConversion: Read the integer by skipping leading zeros until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0.\nRounding: If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then round the integer to remain in the range. Specifically, integers less than -231 should be rounded to -231, and integers greater than 231 - 1 should be rounded to 231 - 1.\nReturn the integer as the final result.",
        "examples": [
            {
                "input": "s = \"42\"",
                "output": "42",
                "explanation": "The underlined characters are what is read in and the caret is the current reader position.\nStep 1: \"42\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"42\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"42\" (\"42\" is read in)\n           ^"
            },
            {
                "input": "s = \" -042\"",
                "output": "-42",
                "explanation": "Step 1: \"   -042\" (leading whitespace is read and ignored)\n            ^\nStep 2: \"   -042\" ('-' is read, so the result should be negative)\n             ^\nStep 3: \"   -042\" (\"042\" is read in, leading zeros ignored in the result)\n               ^"
            },
            {
                "input": "s = \"1337c0d3\"",
                "output": "1337",
                "explanation": "Step 1: \"1337c0d3\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"1337c0d3\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"1337c0d3\" (\"1337\" is read in; reading stops because the next character is a non-digit)\n             ^"
            },
            {
                "input": "s = \"0-1\"",
                "output": "0",
                "explanation": "Step 1: \"0-1\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"0-1\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"0-1\" (\"0\" is read in; reading stops because the next character is a non-digit)\n          ^"
            },
            {
                "input": "s = \"words and 987\"",
                "output": "0",
                "explanation": "Reading stops at the first non-digit character 'w'."
            }
        ],
        "hints": [],
        "topics": [
            "string"
        ]
    },
    {
        "id": 9,
        "title": "Palindrome Number",
        "difficulty": "Easy",
        "acceptance": "57.7%",
        "constraints": [
            "-231 <= x <= 231 - 1",
            "Follow up: Could you solve it without converting the integer to a string?"
        ],
        "description": "Given an integer x, return true if x is a\npalindrome\n, and false otherwise.",
        "examples": [
            {
                "input": "x = 121",
                "output": "true",
                "explanation": "121 reads as 121 from left to right and from right to left."
            },
            {
                "input": "x = -121",
                "output": "false",
                "explanation": "From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome."
            },
            {
                "input": "x = 10",
                "output": "false",
                "explanation": "Reads 01 from right to left. Therefore it is not a palindrome."
            }
        ],
        "hints": [
            "Beware of overflow when you reverse the integer."
        ],
        "topics": [
            "math"
        ]
    },
    {
        "id": 10,
        "title": "Regular Expression Matching",
        "difficulty": "Hard",
        "acceptance": "28.4%",
        "constraints": [
            "1 <= s.length <= 20",
            "1 <= p.length <= 20",
            "s contains only lowercase English letters.",
            "p contains only lowercase English letters, '.', and '*'.",
            "It is guaranteed for each appearance of the character '*', there will be a previous valid character to match."
        ],
        "description": "Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:\n'.' Matches any single character.\n'*' Matches zero or more of the preceding element.\nThe matching should cover the entire input string (not partial).",
        "examples": [
            {
                "input": "s = \"aa\", p = \"a\"",
                "output": "false",
                "explanation": "\"a\" does not match the entire string \"aa\"."
            },
            {
                "input": "s = \"aa\", p = \"a*\"",
                "output": "true",
                "explanation": "'*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\"."
            },
            {
                "input": "s = \"ab\", p = \".*\"",
                "output": "true",
                "explanation": "\".*\" means \"zero or more (*) of any character (.)\"."
            }
        ],
        "hints": [],
        "topics": [
            "string",
            "dynamic-programming",
            "recursion"
        ]
    },
    {
        "id": 11,
        "title": "Container With Most Water",
        "difficulty": "Medium",
        "acceptance": "56.3%",
        "constraints": [
            "n == height.length",
            "2 <= n <= 105",
            "0 <= height[i] <= 104"
        ],
        "description": "You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\nReturn the maximum amount of water a container can store.\nNotice that you may not slant the container.",
        "examples": [
            {
                "input": "height = [1,8,6,2,5,4,8,3,7]",
                "output": "49",
                "explanation": "The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49."
            },
            {
                "input": "height = [1,1]",
                "output": "1",
                "explanation": ""
            }
        ],
        "hints": [
            "If you simulate the problem, it will be O(n^2) which is not efficient.",
            "Try to use two-pointers. Set one pointer to the left and one to the right of the array. Always move the pointer that points to the lower line.",
            "How can you calculate the amount of water at each step?"
        ],
        "topics": [
            "array",
            "two-pointers",
            "greedy"
        ]
    },
    {
        "id": 12,
        "title": "Integer to Roman",
        "difficulty": "Medium",
        "acceptance": "66.5%",
        "constraints": [
            "1 <= num <= 3999"
        ],
        "description": "Seven different symbols represent Roman numerals with the following values:\nSymbol Value\nI 1\nV 5\nX 10\nL 50\nC 100\nD 500\nM 1000\nRoman numerals are formed by appending the conversions of decimal place values from highest to lowest. Converting a decimal place value into a Roman numeral has the following rules:\nIf the value does not start with 4 or 9, select the symbol of the maximal value that can be subtracted from the input, append that symbol to the result, subtract its value, and convert the remainder to a Roman numeral.\nIf the value starts with 4 or 9 use the subtractive form representing one symbol subtracted from the following symbol, for example, 4 is 1 (I) less than 5 (V): IV and 9 is 1 (I) less than 10 (X): IX. Only the following subtractive forms are used: 4 (IV), 9 (IX), 40 (XL), 90 (XC), 400 (CD) and 900 (CM).\nOnly powers of 10 (I, X, C, M) can be appended consecutively at most 3 times to represent multiples of 10. You cannot append 5 (V), 50 (L), or 500 (D) multiple times. If you need to append a symbol 4 times use the subtractive form.\nGiven an integer, convert it to a Roman numeral.",
        "examples": [
            {
                "input": "num = 3749",
                "output": "\"MMMDCCXLIX\"",
                "explanation": "3000 = MMM as 1000 (M) + 1000 (M) + 1000 (M)\n 700 = DCC as 500 (D) + 100 (C) + 100 (C)\n  40 = XL as 10 (X) less of 50 (L)\n   9 = IX as 1 (I) less of 10 (X)\nNote: 49 is not 1 (I) less of 50 (L) because the conversion is based on decimal places"
            },
            {
                "input": "num = 58",
                "output": "\"LVIII\"",
                "explanation": "50 = L\n 8 = VIII"
            },
            {
                "input": "num = 1994",
                "output": "\"MCMXCIV\"",
                "explanation": "1000 = M\n 900 = CM\n  90 = XC\n   4 = IV"
            }
        ],
        "hints": [],
        "topics": [
            "hash-table",
            "math",
            "string"
        ]
    },
    {
        "id": 13,
        "title": "Roman to Integer",
        "difficulty": "Easy",
        "acceptance": "62.9%",
        "constraints": [
            "1 <= s.length <= 15",
            "s contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').",
            "It is guaranteed that s is a valid roman numeral in the range [1, 3999]."
        ],
        "description": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\nI can be placed before V (5) and X (10) to make 4 and 9. \nX can be placed before L (50) and C (100) to make 40 and 90. \nC can be placed before D (500) and M (1000) to make 400 and 900.\nGiven a roman numeral, convert it to an integer.",
        "examples": [
            {
                "input": "s = \"III\"",
                "output": "3",
                "explanation": "III = 3."
            },
            {
                "input": "s = \"LVIII\"",
                "output": "58",
                "explanation": "L = 50, V= 5, III = 3."
            },
            {
                "input": "s = \"MCMXCIV\"",
                "output": "1994",
                "explanation": "M = 1000, CM = 900, XC = 90 and IV = 4."
            }
        ],
        "hints": [
            "Problem is simpler to solve by working the string from back to front and using a map."
        ],
        "topics": [
            "hash-table",
            "math",
            "string"
        ]
    },
    {
        "id": 14,
        "title": "Longest Common Prefix",
        "difficulty": "Easy",
        "acceptance": "44.0%",
        "constraints": [
            "1 <= strs.length <= 200",
            "0 <= strs[i].length <= 200",
            "strs[i] consists of only lowercase English letters."
        ],
        "description": "Write a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefix, return an empty string \"\".",
        "examples": [
            {
                "input": "strs = [\"flower\",\"flow\",\"flight\"]",
                "output": "\"fl\"",
                "explanation": ""
            },
            {
                "input": "strs = [\"dog\",\"racecar\",\"car\"]",
                "output": "\"\"",
                "explanation": "There is no common prefix among the input strings."
            }
        ],
        "hints": [],
        "topics": [
            "string",
            "trie"
        ]
    },
    {
        "id": 15,
        "title": "3Sum",
        "difficulty": "Medium",
        "acceptance": "35.5%",
        "constraints": [
            "3 <= nums.length <= 3000",
            "-105 <= nums[i] <= 105"
        ],
        "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\nNotice that the solution set must not contain duplicate triplets.",
        "examples": [
            {
                "input": "nums = [-1,0,1,2,-1,-4]",
                "output": "[[-1,-1,2],[-1,0,1]]",
                "explanation": "nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter."
            },
            {
                "input": "nums = [0,1,1]",
                "output": "[]",
                "explanation": "The only possible triplet does not sum up to 0."
            },
            {
                "input": "nums = [0,0,0]",
                "output": "[[0,0,0]]",
                "explanation": "The only possible triplet sums up to 0."
            }
        ],
        "hints": [
            "So, we essentially need to find three numbers x, y, and z such that they add up to the given value. If we fix one of the numbers say x, we are left with the two-sum problem at hand!",
            "For the two-sum problem, if we fix one of the numbers, say x, we have to scan the entire array to find the next number y, which is value - x where value is the input parameter. Can we change our array somehow so that this search becomes faster?",
            "The second train of thought for two-sum is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?"
        ],
        "topics": [
            "array",
            "two-pointers",
            "sorting"
        ]
    },
    {
        "id": 16,
        "title": "3Sum Closest",
        "difficulty": "Medium",
        "acceptance": "46.1%",
        "constraints": [
            "3 <= nums.length <= 500",
            "-1000 <= nums[i] <= 1000",
            "-104 <= target <= 104"
        ],
        "description": "Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.\nReturn the sum of the three integers.\nYou may assume that each input would have exactly one solution.",
        "examples": [
            {
                "input": "nums = [-1,2,1,-4], target = 1",
                "output": "2",
                "explanation": "The sum that is closest to the target is 2. (-1 + 2 + 1 = 2)."
            },
            {
                "input": "nums = [0,0,0], target = 1",
                "output": "0",
                "explanation": "The sum that is closest to the target is 0. (0 + 0 + 0 = 0)."
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "two-pointers",
            "sorting"
        ]
    },
    {
        "id": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": "Medium",
        "acceptance": "61.9%",
        "constraints": [
            "0 <= digits.length <= 4",
            "digits[i] is a digit in the range ['2', '9']."
        ],
        "description": "Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\nA mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.",
        "examples": [
            {
                "input": "digits = \"23\"",
                "output": "[\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]",
                "explanation": ""
            },
            {
                "input": "digits = \"\"",
                "output": "[]",
                "explanation": ""
            },
            {
                "input": "digits = \"2\"",
                "output": "[\"a\",\"b\",\"c\"]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "hash-table",
            "string",
            "backtracking"
        ]
    },
    {
        "id": 18,
        "title": "4Sum",
        "difficulty": "Medium",
        "acceptance": "36.8%",
        "constraints": [
            "1 <= nums.length <= 200",
            "-109 <= nums[i] <= 109",
            "-109 <= target <= 109"
        ],
        "description": "Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:\n0 <= a, b, c, d < n\na, b, c, and d are distinct.\nnums[a] + nums[b] + nums[c] + nums[d] == target\nYou may return the answer in any order.",
        "examples": [
            {
                "input": "nums = [1,0,-1,0,-2,2], target = 0",
                "output": "[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]",
                "explanation": ""
            },
            {
                "input": "nums = [2,2,2,2,2], target = 8",
                "output": "[[2,2,2,2]]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "two-pointers",
            "sorting"
        ]
    },
    {
        "id": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": "Medium",
        "acceptance": "46.9%",
        "constraints": [
            "The number of nodes in the list is sz.",
            "1 <= sz <= 30",
            "0 <= Node.val <= 100",
            "1 <= n <= sz",
            "Follow up: Could you do this in one pass?"
        ],
        "description": "Given the head of a linked list, remove the nth node from the end of the list and return its head.",
        "examples": [
            {
                "input": "head = [1,2,3,4,5], n = 2",
                "output": "[1,2,3,5]",
                "explanation": ""
            },
            {
                "input": "head = [1], n = 1",
                "output": "[]",
                "explanation": ""
            },
            {
                "input": "head = [1,2], n = 1",
                "output": "[1]",
                "explanation": ""
            }
        ],
        "hints": [
            "Maintain two pointers and update one with a delay of n steps."
        ],
        "topics": [
            "linked-list",
            "two-pointers"
        ]
    },
    {
        "id": 20,
        "title": "Valid Parentheses",
        "difficulty": "Easy",
        "acceptance": "41.2%",
        "constraints": [
            "1 <= s.length <= 104",
            "s consists of parentheses only '()[]{}'."
        ],
        "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nAn input string is valid if:\nOpen brackets must be closed by the same type of brackets.\nOpen brackets must be closed in the correct order.\nEvery close bracket has a corresponding open bracket of the same type.",
        "examples": [
            {
                "input": "s = \"()\"",
                "output": "true",
                "explanation": ""
            },
            {
                "input": "s = \"()[]{}\"",
                "output": "true",
                "explanation": ""
            },
            {
                "input": "s = \"(]\"",
                "output": "false",
                "explanation": ""
            },
            {
                "input": "s = \"([])\"",
                "output": "true",
                "explanation": ""
            }
        ],
        "hints": [
            "Use a stack of characters.",
            "When you encounter an opening bracket, push it to the top of the stack.",
            "When you encounter a closing bracket, check if the top of the stack was the opening for it. If yes, pop it from the stack. Otherwise, return false."
        ],
        "topics": [
            "string",
            "stack"
        ]
    },
    {
        "id": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": "Easy",
        "acceptance": "65.4%",
        "constraints": [
            "The number of nodes in both lists is in the range [0, 50].",
            "-100 <= Node.val <= 100",
            "Both list1 and list2 are sorted in non-decreasing order."
        ],
        "description": "You are given the heads of two sorted linked lists list1 and list2.\nMerge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.\nReturn the head of the merged linked list.",
        "examples": [
            {
                "input": "list1 = [1,2,4], list2 = [1,3,4]",
                "output": "[1,1,2,3,4,4]",
                "explanation": ""
            },
            {
                "input": "list1 = [], list2 = []",
                "output": "[]",
                "explanation": ""
            },
            {
                "input": "list1 = [], list2 = [0]",
                "output": "[0]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "linked-list",
            "recursion"
        ]
    },
    {
        "id": 22,
        "title": "Generate Parentheses",
        "difficulty": "Medium",
        "acceptance": "75.6%",
        "constraints": [
            "1 <= n <= 8"
        ],
        "description": "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.",
        "examples": [
            {
                "input": "n = 3",
                "output": "[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]",
                "explanation": ""
            },
            {
                "input": "n = 1",
                "output": "[\"()\"]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "string",
            "dynamic-programming",
            "backtracking"
        ]
    },
    {
        "id": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": "Hard",
        "acceptance": "54.4%",
        "constraints": [
            "k == lists.length",
            "0 <= k <= 104",
            "0 <= lists[i].length <= 500",
            "-104 <= lists[i][j] <= 104",
            "lists[i] is sorted in ascending order.",
            "The sum of lists[i].length will not exceed 104."
        ],
        "description": "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\nMerge all the linked-lists into one sorted linked-list and return it.",
        "examples": [
            {
                "input": "lists = [[1,4,5],[1,3,4],[2,6]]",
                "output": "[1,1,2,3,4,4,5,6]",
                "explanation": "The linked-lists are:\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\nmerging them into one sorted list:\n1->1->2->3->4->4->5->6"
            },
            {
                "input": "lists = []",
                "output": "[]",
                "explanation": ""
            },
            {
                "input": "lists = [[]]",
                "output": "[]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "linked-list",
            "divide-and-conquer",
            "heap-priority-queue",
            "merge-sort"
        ]
    },
    {
        "id": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": "Medium",
        "acceptance": "65.5%",
        "constraints": [
            "The number of nodes in the list is in the range [0, 100].",
            "0 <= Node.val <= 100"
        ],
        "description": "Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)",
        "examples": [
            {
                "input": "head = [1,2,3,4]",
                "output": "[2,1,4,3]",
                "explanation": ""
            },
            {
                "input": "head = []",
                "output": "[]",
                "explanation": ""
            },
            {
                "input": "head = [1]",
                "output": "[1]",
                "explanation": ""
            },
            {
                "input": "head = [1,2,3]",
                "output": "[2,1,3]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "linked-list",
            "recursion"
        ]
    },
    {
        "id": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": "Hard",
        "acceptance": "60.7%",
        "constraints": [
            "The number of nodes in the list is n.",
            "1 <= k <= n <= 5000",
            "0 <= Node.val <= 1000",
            "Follow-up: Can you solve the problem in O(1) extra memory space?"
        ],
        "description": "Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\nk is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\nYou may not alter the values in the list's nodes, only nodes themselves may be changed.",
        "examples": [
            {
                "input": "head = [1,2,3,4,5], k = 2",
                "output": "[2,1,4,3,5]",
                "explanation": ""
            },
            {
                "input": "head = [1,2,3,4,5], k = 3",
                "output": "[3,2,1,4,5]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "linked-list",
            "recursion"
        ]
    },
    {
        "id": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": "Easy",
        "acceptance": "57.9%",
        "constraints": [
            "1 <= nums.length <= 3 * 104",
            "-100 <= nums[i] <= 100",
            "nums is sorted in non-decreasing order."
        ],
        "description": "Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.\nConsider the number of unique elements of nums to be k, to get accepted, you need to do the following things:\nChange the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.\nReturn k.\nCustom Judge:\nThe judge will test your solution with the following code:\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i < k; i++) {\n    assert nums[i] == expectedNums[i];\n}\nIf all assertions pass, then your solution will be accepted.",
        "examples": [
            {
                "input": "nums = [1,1,2]",
                "output": "2, nums = [1,2,_]",
                "explanation": "Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."
            },
            {
                "input": "nums = [0,0,1,1,1,2,2,3,3,4]",
                "output": "5, nums = [0,1,2,3,4,_,_,_,_,_]",
                "explanation": "Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."
            }
        ],
        "hints": [
            "In this problem, the key point to focus on is the input array being sorted. As far as duplicate elements are concerned, what is their positioning in the array when the given array is sorted? Look at the image below for the answer. If we know the position of one of the elements, do we also know the positioning of all the duplicate elements?",
            "We need to modify the array in-place and the size of the final array would potentially be smaller than the size of the input array. So, we ought to use a two-pointer approach here. One, that would keep track of the current element in the original array and another one for just the unique elements.",
            "Essentially, once an element is encountered, you simply need to bypass its duplicates and move on to the next unique element."
        ],
        "topics": [
            "array",
            "two-pointers"
        ]
    },
    {
        "id": 27,
        "title": "Remove Element",
        "difficulty": "Easy",
        "acceptance": "58.4%",
        "constraints": [
            "0 <= nums.length <= 100",
            "0 <= nums[i] <= 50",
            "0 <= val <= 100"
        ],
        "description": "Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.\nConsider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:\nChange the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums.\nReturn k.\nCustom Judge:\nThe judge will test your solution with the following code:\nint[] nums = [...]; // Input array\nint val = ...; // Value to remove\nint[] expectedNums = [...]; // The expected answer with correct length.\n                            // It is sorted with no values equaling val.\n\nint k = removeElement(nums, val); // Calls your implementation\n\nassert k == expectedNums.length;\nsort(nums, 0, k); // Sort the first k elements of nums\nfor (int i = 0; i < actualLength; i++) {\n    assert nums[i] == expectedNums[i];\n}\nIf all assertions pass, then your solution will be accepted.",
        "examples": [
            {
                "input": "nums = [3,2,2,3], val = 3",
                "output": "2, nums = [2,2,_,_]",
                "explanation": "Your function should return k = 2, with the first two elements of nums being 2.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."
            },
            {
                "input": "nums = [0,1,2,2,3,0,4,2], val = 2",
                "output": "5, nums = [0,1,4,0,3,_,_,_]",
                "explanation": "Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\nNote that the five elements can be returned in any order.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."
            }
        ],
        "hints": [
            "The problem statement clearly asks us to modify the array in-place and it also says that the element beyond the new length of the array can be anything. Given an element, we need to remove all the occurrences of it from the array. We don't technically need to remove that element per-say, right?",
            "We can move all the occurrences of this element to the end of the array. Use two pointers!",
            "Yet another direction of thought is to consider the elements to be removed as non-existent. In a single pass, if we keep copying the visible elements in-place, that should also solve this problem for us."
        ],
        "topics": [
            "array",
            "two-pointers"
        ]
    },
    {
        "id": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": "Easy",
        "acceptance": "43.6%",
        "constraints": [
            "1 <= haystack.length, needle.length <= 104",
            "haystack and needle consist of only lowercase English characters."
        ],
        "description": "Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.",
        "examples": [
            {
                "input": "haystack = \"sadbutsad\", needle = \"sad\"",
                "output": "0",
                "explanation": "\"sad\" occurs at index 0 and 6.\nThe first occurrence is at index 0, so we return 0."
            },
            {
                "input": "haystack = \"leetcode\", needle = \"leeto\"",
                "output": "-1",
                "explanation": "\"leeto\" did not occur in \"leetcode\", so we return -1."
            }
        ],
        "hints": [],
        "topics": [
            "two-pointers",
            "string",
            "string-matching"
        ]
    },
    {
        "id": 29,
        "title": "Divide Two Integers",
        "difficulty": "Medium",
        "acceptance": "17.8%",
        "constraints": [
            "-231 <= dividend, divisor <= 231 - 1",
            "divisor != 0"
        ],
        "description": "Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.\nThe integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.\nReturn the quotient after dividing dividend by divisor.\nNote: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.",
        "examples": [
            {
                "input": "dividend = 10, divisor = 3",
                "output": "3",
                "explanation": "10/3 = 3.33333.. which is truncated to 3."
            },
            {
                "input": "dividend = 7, divisor = -3",
                "output": "-2",
                "explanation": "7/-3 = -2.33333.. which is truncated to -2."
            }
        ],
        "hints": [],
        "topics": [
            "math",
            "bit-manipulation"
        ]
    },
    {
        "id": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": "Hard",
        "acceptance": "32.5%",
        "constraints": [
            "1 <= s.length <= 104",
            "1 <= words.length <= 5000",
            "1 <= words[i].length <= 30",
            "s and words[i] consist of lowercase English letters."
        ],
        "description": "You are given a string s and an array of strings words. All the strings of words are of the same length.\nA concatenated string is a string that exactly contains all the strings of any permutation of words concatenated.\nFor example, if words = [\"ab\",\"cd\",\"ef\"], then \"abcdef\", \"abefcd\", \"cdabef\", \"cdefab\", \"efabcd\", and \"efcdab\" are all concatenated strings. \"acdbef\" is not a concatenated string because it is not the concatenation of any permutation of words.\nReturn an array of the starting indices of all the concatenated substrings in s. You can return the answer in any order.",
        "examples": [
            {
                "input": "s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]",
                "output": "[0,9]",
                "explanation": "The substring starting at 0 is \"barfoo\". It is the concatenation of [\"bar\",\"foo\"] which is a permutation of words.\nThe substring starting at 9 is \"foobar\". It is the concatenation of [\"foo\",\"bar\"] which is a permutation of words."
            },
            {
                "input": "s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]",
                "output": "[]",
                "explanation": "There is no concatenated substring."
            },
            {
                "input": "s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]",
                "output": "[6,9,12]",
                "explanation": "The substring starting at 6 is \"foobarthe\". It is the concatenation of [\"foo\",\"bar\",\"the\"].\nThe substring starting at 9 is \"barthefoo\". It is the concatenation of [\"bar\",\"the\",\"foo\"].\nThe substring starting at 12 is \"thefoobar\". It is the concatenation of [\"the\",\"foo\",\"bar\"]."
            }
        ],
        "hints": [],
        "topics": [
            "hash-table",
            "string",
            "sliding-window"
        ]
    },
    {
        "id": 31,
        "title": "Next Permutation",
        "difficulty": "Medium",
        "acceptance": "41.3%",
        "constraints": [
            "1 <= nums.length <= 100",
            "0 <= nums[i] <= 100"
        ],
        "description": "A permutation of an array of integers is an arrangement of its members into a sequence or linear order.\nFor example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].\nThe next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).\nFor example, the next permutation of arr = [1,2,3] is [1,3,2].\nSimilarly, the next permutation of arr = [2,3,1] is [3,1,2].\nWhile the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.\nGiven an array of integers nums, find the next permutation of nums.\nThe replacement must be in place and use only constant extra memory.",
        "examples": [
            {
                "input": "nums = [1,2,3]",
                "output": "[1,3,2]",
                "explanation": ""
            },
            {
                "input": "nums = [3,2,1]",
                "output": "[1,2,3]",
                "explanation": ""
            },
            {
                "input": "nums = [1,1,5]",
                "output": "[1,5,1]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "two-pointers"
        ]
    },
    {
        "id": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": "Hard",
        "acceptance": "34.9%",
        "constraints": [
            "0 <= s.length <= 3 * 104",
            "s[i] is '(', or ')'."
        ],
        "description": "Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses\nsubstring\n.",
        "examples": [
            {
                "input": "s = \"(()\"",
                "output": "2",
                "explanation": "The longest valid parentheses substring is \"()\"."
            },
            {
                "input": "s = \")()())\"",
                "output": "4",
                "explanation": "The longest valid parentheses substring is \"()()\"."
            },
            {
                "input": "s = \"\"",
                "output": "0",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "string",
            "dynamic-programming",
            "stack"
        ]
    },
    {
        "id": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": "Medium",
        "acceptance": "41.6%",
        "constraints": [
            "1 <= nums.length <= 5000",
            "-104 <= nums[i] <= 104",
            "All values of nums are unique.",
            "nums is an ascending array that is possibly rotated.",
            "-104 <= target <= 104"
        ],
        "description": "There is an integer array nums sorted in ascending order (with distinct values).\nPrior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\nGiven the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\nYou must write an algorithm with O(log n) runtime complexity.",
        "examples": [
            {
                "input": "nums = [4,5,6,7,0,1,2], target = 0",
                "output": "4",
                "explanation": ""
            },
            {
                "input": "nums = [4,5,6,7,0,1,2], target = 3",
                "output": "-1",
                "explanation": ""
            },
            {
                "input": "nums = [1], target = 0",
                "output": "-1",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "binary-search"
        ]
    },
    {
        "id": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": "Medium",
        "acceptance": "45.3%",
        "constraints": [
            "0 <= nums.length <= 105",
            "-109 <= nums[i] <= 109",
            "nums is a non-decreasing array.",
            "-109 <= target <= 109"
        ],
        "description": "Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\nIf target is not found in the array, return [-1, -1].\nYou must write an algorithm with O(log n) runtime complexity.",
        "examples": [
            {
                "input": "nums = [5,7,7,8,8,10], target = 8",
                "output": "[3,4]",
                "explanation": ""
            },
            {
                "input": "nums = [5,7,7,8,8,10], target = 6",
                "output": "[-1,-1]",
                "explanation": ""
            },
            {
                "input": "nums = [], target = 0",
                "output": "[-1,-1]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "binary-search"
        ]
    },
    {
        "id": 35,
        "title": "Search Insert Position",
        "difficulty": "Easy",
        "acceptance": "47.4%",
        "constraints": [
            "1 <= nums.length <= 104",
            "-104 <= nums[i] <= 104",
            "nums contains distinct values sorted in ascending order.",
            "-104 <= target <= 104"
        ],
        "description": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\nYou must write an algorithm with O(log n) runtime complexity.",
        "examples": [
            {
                "input": "nums = [1,3,5,6], target = 5",
                "output": "2",
                "explanation": ""
            },
            {
                "input": "nums = [1,3,5,6], target = 2",
                "output": "1",
                "explanation": ""
            },
            {
                "input": "nums = [1,3,5,6], target = 7",
                "output": "4",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "binary-search"
        ]
    },
    {
        "id": 36,
        "title": "Valid Sudoku",
        "difficulty": "Medium",
        "acceptance": "60.7%",
        "constraints": [
            "board.length == 9",
            "board[i].length == 9",
            "board[i][j] is a digit 1-9 or '.'."
        ],
        "description": "Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\nEach row must contain the digits 1-9 without repetition.\nEach column must contain the digits 1-9 without repetition.\nEach of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.\nNote:\nA Sudoku board (partially filled) could be valid but is not necessarily solvable.\nOnly the filled cells need to be validated according to the mentioned rules.",
        "examples": [
            {
                "input": "board = \n[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]",
                "output": "true",
                "explanation": ""
            },
            {
                "input": "board = \n[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]",
                "output": "false",
                "explanation": "Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid."
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "hash-table",
            "matrix"
        ]
    },
    {
        "id": 37,
        "title": "Sudoku Solver",
        "difficulty": "Hard",
        "acceptance": "63.1%",
        "constraints": [
            "board.length == 9",
            "board[i].length == 9",
            "board[i][j] is a digit or '.'.",
            "It is guaranteed that the input board has only one solution."
        ],
        "description": "Write a program to solve a Sudoku puzzle by filling the empty cells.\nA sudoku solution must satisfy all of the following rules:\nEach of the digits 1-9 must occur exactly once in each row.\nEach of the digits 1-9 must occur exactly once in each column.\nEach of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\nThe '.' character indicates empty cells.",
        "examples": [
            {
                "input": "board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]",
                "output": "[[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]",
                "explanation": "The input board is shown above and the only valid solution is shown below:"
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "hash-table",
            "backtracking",
            "matrix"
        ]
    },
    {
        "id": 38,
        "title": "Count and Say",
        "difficulty": "Medium",
        "acceptance": "56.6%",
        "constraints": [
            "1 <= n <= 30",
            "Follow up: Could you solve it iteratively?"
        ],
        "description": "The count-and-say sequence is a sequence of digit strings defined by the recursive formula:\ncountAndSay(1) = \"1\"\ncountAndSay(n) is the run-length encoding of countAndSay(n - 1).\nRun-length encoding (RLE) is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string \"3322251\" we replace \"33\" with \"23\", replace \"222\" with \"32\", replace \"5\" with \"15\" and replace \"1\" with \"11\". Thus the compressed string becomes \"23321511\".\nGiven a positive integer n, return the nth element of the count-and-say sequence.",
        "examples": [
            {
                "input": "n = 4",
                "output": "\"1211\"",
                "explanation": "countAndSay(1) = \"1\"\ncountAndSay(2) = RLE of \"1\" = \"11\"\ncountAndSay(3) = RLE of \"11\" = \"21\"\ncountAndSay(4) = RLE of \"21\" = \"1211\""
            },
            {
                "input": "n = 1",
                "output": "\"1\"",
                "explanation": "This is the base case."
            }
        ],
        "hints": [
            "Create a helper function that maps an integer to pairs of its digits and their frequencies. For example, if you call this function with \"223314444411\", then it maps it to an array of pairs [[2,2], [3,2], [1,1], [4,5], [1, 2]].",
            "Create another helper function that takes the array of pairs and creates a new integer. For example, if you call this function with [[2,2], [3,2], [1,1], [4,5], [1, 2]], it should create \"22\"+\"23\"+\"11\"+\"54\"+\"21\" = \"2223115421\".",
            "Now, with the two helper functions, you can start with \"1\" and call the two functions alternatively n-1 times. The answer is the last integer you will obtain."
        ],
        "topics": [
            "string"
        ]
    },
    {
        "id": 39,
        "title": "Combination Sum",
        "difficulty": "Medium",
        "acceptance": "72.9%",
        "constraints": [
            "1 <= candidates.length <= 30",
            "2 <= candidates[i] <= 40",
            "All elements of candidates are distinct.",
            "1 <= target <= 40"
        ],
        "description": "Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\nThe same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the\nfrequency\nof at least one of the chosen numbers is different.\nThe test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.",
        "examples": [
            {
                "input": "candidates = [2,3,6,7], target = 7",
                "output": "[[2,2,3],[7]]",
                "explanation": "2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n7 is a candidate, and 7 = 7.\nThese are the only two combinations."
            },
            {
                "input": "candidates = [2,3,5], target = 8",
                "output": "[[2,2,2,2],[2,3,3],[3,5]]",
                "explanation": ""
            },
            {
                "input": "candidates = [2], target = 1",
                "output": "[]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "backtracking"
        ]
    },
    {
        "id": 40,
        "title": "Combination Sum II",
        "difficulty": "Medium",
        "acceptance": "56.5%",
        "constraints": [
            "1 <= candidates.length <= 100",
            "1 <= candidates[i] <= 50",
            "1 <= target <= 30"
        ],
        "description": "Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.\nEach number in candidates may only be used once in the combination.\nNote: The solution set must not contain duplicate combinations.",
        "examples": [
            {
                "input": "candidates = [10,1,2,7,6,1,5], target = 8",
                "output": "[\n[1,1,6],\n[1,2,5],\n[1,7],\n[2,6]\n]",
                "explanation": ""
            },
            {
                "input": "candidates = [2,5,2,1,2], target = 5",
                "output": "[\n[1,2,2],\n[5]\n]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "backtracking"
        ]
    },
    {
        "id": 41,
        "title": "First Missing Positive",
        "difficulty": "Hard",
        "acceptance": "40.0%",
        "constraints": [
            "1 <= nums.length <= 105",
            "-231 <= nums[i] <= 231 - 1"
        ],
        "description": "Given an unsorted integer array nums. Return the smallest positive integer that is not present in nums.\nYou must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.",
        "examples": [
            {
                "input": "nums = [1,2,0]",
                "output": "3",
                "explanation": "The numbers in the range [1,2] are all in the array."
            },
            {
                "input": "nums = [3,4,-1,1]",
                "output": "2",
                "explanation": "1 is in the array but 2 is missing."
            },
            {
                "input": "nums = [7,8,9,11,12]",
                "output": "1",
                "explanation": "The smallest positive integer 1 is missing."
            }
        ],
        "hints": [
            "Think about how you would solve the problem in non-constant space. Can you apply that logic to the existing space?",
            "We don't care about duplicates or non-positive integers",
            "Remember that O(2n) = O(n)"
        ],
        "topics": [
            "array",
            "hash-table"
        ]
    },
    {
        "id": 42,
        "title": "Trapping Rain Water",
        "difficulty": "Hard",
        "acceptance": "63.3%",
        "constraints": [
            "n == height.length",
            "1 <= n <= 2 * 104",
            "0 <= height[i] <= 105"
        ],
        "description": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.",
        "examples": [
            {
                "input": "height = [0,1,0,2,1,0,1,3,2,1,2,1]",
                "output": "6",
                "explanation": "The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped."
            },
            {
                "input": "height = [4,2,0,3,2,5]",
                "output": "9",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "two-pointers",
            "dynamic-programming",
            "stack",
            "monotonic-stack"
        ]
    },
    {
        "id": 43,
        "title": "Multiply Strings",
        "difficulty": "Medium",
        "acceptance": "41.1%",
        "constraints": [
            "1 <= num1.length, num2.length <= 200",
            "num1 and num2 consist of digits only.",
            "Both num1 and num2 do not contain any leading zero, except the number 0 itself."
        ],
        "description": "Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\nNote: You must not use any built-in BigInteger library or convert the inputs to integer directly.",
        "examples": [
            {
                "input": "num1 = \"2\", num2 = \"3\"",
                "output": "\"6\"",
                "explanation": ""
            },
            {
                "input": "num1 = \"123\", num2 = \"456\"",
                "output": "\"56088\"",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "math",
            "string",
            "simulation"
        ]
    },
    {
        "id": 44,
        "title": "Wildcard Matching",
        "difficulty": "Hard",
        "acceptance": "28.7%",
        "constraints": [
            "0 <= s.length, p.length <= 2000",
            "s contains only lowercase English letters.",
            "p contains only lowercase English letters, '?' or '*'."
        ],
        "description": "Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:\n'?' Matches any single character.\n'*' Matches any sequence of characters (including the empty sequence).\nThe matching should cover the entire input string (not partial).",
        "examples": [
            {
                "input": "s = \"aa\", p = \"a\"",
                "output": "false",
                "explanation": "\"a\" does not match the entire string \"aa\"."
            },
            {
                "input": "s = \"aa\", p = \"*\"",
                "output": "true",
                "explanation": "'*' matches any sequence."
            },
            {
                "input": "s = \"cb\", p = \"?a\"",
                "output": "false",
                "explanation": "'?' matches 'c', but the second letter is 'a', which does not match 'b'."
            }
        ],
        "hints": [],
        "topics": [
            "string",
            "dynamic-programming",
            "greedy",
            "recursion"
        ]
    },
    {
        "id": 45,
        "title": "Jump Game II",
        "difficulty": "Medium",
        "acceptance": "40.8%",
        "constraints": [
            "1 <= nums.length <= 104",
            "0 <= nums[i] <= 1000",
            "It's guaranteed that you can reach nums[n - 1]."
        ],
        "description": "You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].\nEach element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:\n0 <= j <= nums[i] and\ni + j < n\nReturn the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].",
        "examples": [
            {
                "input": "nums = [2,3,1,1,4]",
                "output": "2",
                "explanation": "The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index."
            },
            {
                "input": "nums = [2,3,0,1,4]",
                "output": "2",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "dynamic-programming",
            "greedy"
        ]
    },
    {
        "id": 46,
        "title": "Permutations",
        "difficulty": "Medium",
        "acceptance": "79.4%",
        "constraints": [
            "1 <= nums.length <= 6",
            "-10 <= nums[i] <= 10",
            "All the integers of nums are unique."
        ],
        "description": "Given an array nums of distinct integers, return all the possible\npermutations\n. You can return the answer in any order.",
        "examples": [
            {
                "input": "nums = [1,2,3]",
                "output": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]",
                "explanation": ""
            },
            {
                "input": "nums = [0,1]",
                "output": "[[0,1],[1,0]]",
                "explanation": ""
            },
            {
                "input": "nums = [1]",
                "output": "[[1]]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "backtracking"
        ]
    },
    {
        "id": 47,
        "title": "Permutations II",
        "difficulty": "Medium",
        "acceptance": "60.2%",
        "constraints": [
            "1 <= nums.length <= 8",
            "-10 <= nums[i] <= 10"
        ],
        "description": "Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.",
        "examples": [
            {
                "input": "nums = [1,1,2]",
                "output": "[[1,1,2],\n [1,2,1],\n [2,1,1]]",
                "explanation": ""
            },
            {
                "input": "nums = [1,2,3]",
                "output": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "backtracking"
        ]
    },
    {
        "id": 48,
        "title": "Rotate Image",
        "difficulty": "Medium",
        "acceptance": "76.1%",
        "constraints": [
            "n == matrix.length == matrix[i].length",
            "1 <= n <= 20",
            "-1000 <= matrix[i][j] <= 1000"
        ],
        "description": "You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.",
        "examples": [
            {
                "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
                "output": "[[7,4,1],[8,5,2],[9,6,3]]",
                "explanation": ""
            },
            {
                "input": "matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]",
                "output": "[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "math",
            "matrix"
        ]
    },
    {
        "id": 49,
        "title": "Group Anagrams",
        "difficulty": "Medium",
        "acceptance": "69.6%",
        "constraints": [
            "1 <= strs.length <= 104",
            "0 <= strs[i].length <= 100",
            "strs[i] consists of lowercase English letters."
        ],
        "description": "Given an array of strings strs, group the\nanagrams\ntogether. You can return the answer in any order.",
        "examples": [
            {
                "input": "strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]",
                "output": "[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]",
                "explanation": "There is no string in strs that can be rearranged to form \"bat\".\nThe strings \"nat\" and \"tan\" are anagrams as they can be rearranged to form each other.\nThe strings \"ate\", \"eat\", and \"tea\" are anagrams as they can be rearranged to form each other."
            },
            {
                "input": "strs = [\"\"]",
                "output": "[[\"\"]]",
                "explanation": ""
            },
            {
                "input": "strs = [\"a\"]",
                "output": "[[\"a\"]]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "hash-table",
            "string",
            "sorting"
        ]
    },
    {
        "id": 50,
        "title": "Pow(x, n)",
        "difficulty": "Medium",
        "acceptance": "35.7%",
        "constraints": [
            "-100.0 < x < 100.0",
            "-231 <= n <= 231-1",
            "n is an integer.",
            "Either x is not zero or n > 0.",
            "-104 <= xn <= 104"
        ],
        "description": "Implement pow(x, n), which calculates x raised to the power n (i.e., xn).",
        "examples": [
            {
                "input": "x = 2.00000, n = 10",
                "output": "1024.00000",
                "explanation": ""
            },
            {
                "input": "x = 2.10000, n = 3",
                "output": "9.26100",
                "explanation": ""
            },
            {
                "input": "x = 2.00000, n = -2",
                "output": "0.25000",
                "explanation": "2-2 = 1/22 = 1/4 = 0.25"
            }
        ],
        "hints": [],
        "topics": [
            "math",
            "recursion"
        ]
    },
    {
        "id": 51,
        "title": "N-Queens",
        "difficulty": "Hard",
        "acceptance": "70.2%",
        "constraints": [
            "1 <= n <= 9"
        ],
        "description": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\nGiven an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.\nEach solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.",
        "examples": [
            {
                "input": "n = 4",
                "output": "[[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]",
                "explanation": "There exist two distinct solutions to the 4-queens puzzle as shown above"
            },
            {
                "input": "n = 1",
                "output": "[[\"Q\"]]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "backtracking"
        ]
    },
    {
        "id": 52,
        "title": "N-Queens II",
        "difficulty": "Hard",
        "acceptance": "75.1%",
        "constraints": [
            "1 <= n <= 9"
        ],
        "description": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\nGiven an integer n, return the number of distinct solutions to the n-queens puzzle.",
        "examples": [
            {
                "input": "n = 4",
                "output": "2",
                "explanation": "There are two distinct solutions to the 4-queens puzzle as shown."
            },
            {
                "input": "n = 1",
                "output": "1",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "backtracking"
        ]
    },
    {
        "id": 53,
        "title": "Maximum Subarray",
        "difficulty": "Medium",
        "acceptance": "51.3%",
        "constraints": [
            "1 <= nums.length <= 105",
            "-104 <= nums[i] <= 104",
            "Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle."
        ],
        "description": "Given an integer array nums, find the\nsubarray\nwith the largest sum, and return its sum.",
        "examples": [
            {
                "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
                "output": "6",
                "explanation": "The subarray [4,-1,2,1] has the largest sum 6."
            },
            {
                "input": "nums = [1]",
                "output": "1",
                "explanation": "The subarray [1] has the largest sum 1."
            },
            {
                "input": "nums = [5,4,-1,7,8]",
                "output": "23",
                "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23."
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "divide-and-conquer",
            "dynamic-programming"
        ]
    },
    {
        "id": 54,
        "title": "Spiral Matrix",
        "difficulty": "Medium",
        "acceptance": "51.6%",
        "constraints": [
            "m == matrix.length",
            "n == matrix[i].length",
            "1 <= m, n <= 10",
            "-100 <= matrix[i][j] <= 100"
        ],
        "description": "Given an m x n matrix, return all elements of the matrix in spiral order.",
        "examples": [
            {
                "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
                "output": "[1,2,3,6,9,8,7,4,5]",
                "explanation": ""
            },
            {
                "input": "matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]",
                "output": "[1,2,3,4,8,12,11,10,9,5,6,7]",
                "explanation": ""
            }
        ],
        "hints": [
            "Well for some problems, the best way really is to come up with some algorithms for simulation. Basically, you need to simulate what the problem asks us to do.",
            "We go boundary by boundary and move inwards. That is the essential operation. First row, last column, last row, first column, and then we move inwards by 1 and repeat. That's all. That is all the simulation that we need.",
            "Think about when you want to switch the progress on one of the indexes. If you progress on i out of [i, j], you'll shift in the same column. Similarly, by changing values for j, you'd be shifting in the same row. Also, keep track of the end of a boundary so that you can move inwards and then keep repeating. It's always best to simulate edge cases like a single column or a single row to see if anything breaks or not."
        ],
        "topics": [
            "array",
            "matrix",
            "simulation"
        ]
    },
    {
        "id": 55,
        "title": "Jump Game",
        "difficulty": "Medium",
        "acceptance": "38.8%",
        "constraints": [
            "1 <= nums.length <= 104",
            "0 <= nums[i] <= 105"
        ],
        "description": "You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.\nReturn true if you can reach the last index, or false otherwise.",
        "examples": [
            {
                "input": "nums = [2,3,1,1,4]",
                "output": "true",
                "explanation": "Jump 1 step from index 0 to 1, then 3 steps to the last index."
            },
            {
                "input": "nums = [3,2,1,0,4]",
                "output": "false",
                "explanation": "You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index."
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "dynamic-programming",
            "greedy"
        ]
    },
    {
        "id": 56,
        "title": "Merge Intervals",
        "difficulty": "Medium",
        "acceptance": "48.1%",
        "constraints": [
            "1 <= intervals.length <= 104",
            "intervals[i].length == 2",
            "0 <= starti <= endi <= 104"
        ],
        "description": "Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.",
        "examples": [
            {
                "input": "intervals = [[1,3],[2,6],[8,10],[15,18]]",
                "output": "[[1,6],[8,10],[15,18]]",
                "explanation": "Since intervals [1,3] and [2,6] overlap, merge them into [1,6]."
            },
            {
                "input": "intervals = [[1,4],[4,5]]",
                "output": "[[1,5]]",
                "explanation": "Intervals [1,4] and [4,5] are considered overlapping."
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "sorting"
        ]
    },
    {
        "id": 57,
        "title": "Insert Interval",
        "difficulty": "Medium",
        "acceptance": "42.3%",
        "constraints": [
            "0 <= intervals.length <= 104",
            "intervals[i].length == 2",
            "0 <= starti <= endi <= 105",
            "intervals is sorted by starti in ascending order.",
            "newInterval.length == 2",
            "0 <= start <= end <= 105"
        ],
        "description": "You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.\nInsert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\nReturn intervals after the insertion.\nNote that you don't need to modify intervals in-place. You can make a new array and return it.",
        "examples": [
            {
                "input": "intervals = [[1,3],[6,9]], newInterval = [2,5]",
                "output": "[[1,5],[6,9]]",
                "explanation": ""
            },
            {
                "input": "intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]",
                "output": "[[1,2],[3,10],[12,16]]",
                "explanation": "Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10]."
            }
        ],
        "hints": [
            "Intervals Array is sorted. Can you use Binary Search to find the correct position to insert the new Interval.?",
            "Can you try merging the overlapping intervals while inserting the new interval?",
            "This can be done by comparing the end of the last interval with the start of the new interval and vice versa."
        ],
        "topics": [
            "array"
        ]
    },
    {
        "id": 58,
        "title": "Length of Last Word",
        "difficulty": "Easy",
        "acceptance": "54.0%",
        "constraints": [
            "1 <= s.length <= 104",
            "s consists of only English letters and spaces ' '.",
            "There will be at least one word in s."
        ],
        "description": "Given a string s consisting of words and spaces, return the length of the last word in the string.\nA word is a maximal\nsubstring\nconsisting of non-space characters only.",
        "examples": [
            {
                "input": "s = \"Hello World\"",
                "output": "5",
                "explanation": "The last word is \"World\" with length 5."
            },
            {
                "input": "s = \"   fly me   to   the moon  \"",
                "output": "4",
                "explanation": "The last word is \"moon\" with length 4."
            },
            {
                "input": "s = \"luffy is still joyboy\"",
                "output": "6",
                "explanation": "The last word is \"joyboy\" with length 6."
            }
        ],
        "hints": [],
        "topics": [
            "string"
        ]
    },
    {
        "id": 59,
        "title": "Spiral Matrix II",
        "difficulty": "Medium",
        "acceptance": "72.3%",
        "constraints": [
            "1 <= n <= 20"
        ],
        "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
        "examples": [
            {
                "input": "n = 3",
                "output": "[[1,2,3],[8,9,4],[7,6,5]]",
                "explanation": ""
            },
            {
                "input": "n = 1",
                "output": "[[1]]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "matrix",
            "simulation"
        ]
    },
    {
        "id": 60,
        "title": "Permutation Sequence",
        "difficulty": "Hard",
        "acceptance": "48.3%",
        "constraints": [
            "1 <= n <= 9",
            "1 <= k <= n!"
        ],
        "description": "The set [1, 2, 3, ..., n] contains a total of n! unique permutations.\nBy listing and labeling all of the permutations in order, we get the following sequence for n = 3:\n\"123\"\n\"132\"\n\"213\"\n\"231\"\n\"312\"\n\"321\"\nGiven n and k, return the kth permutation sequence.",
        "examples": [
            {
                "input": "n = 3, k = 3",
                "output": "\"213\"",
                "explanation": ""
            },
            {
                "input": "n = 4, k = 9",
                "output": "\"2314\"",
                "explanation": ""
            },
            {
                "input": "n = 3, k = 1",
                "output": "\"123\"",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "math",
            "recursion"
        ]
    },
    {
        "id": 61,
        "title": "Rotate List",
        "difficulty": "Medium",
        "acceptance": "38.8%",
        "constraints": [
            "The number of nodes in the list is in the range [0, 500].",
            "-100 <= Node.val <= 100",
            "0 <= k <= 2 * 109"
        ],
        "description": "Given the head of a linked list, rotate the list to the right by k places.",
        "examples": [
            {
                "input": "head = [1,2,3,4,5], k = 2",
                "output": "[4,5,1,2,3]",
                "explanation": ""
            },
            {
                "input": "head = [0,1,2], k = 4",
                "output": "[2,0,1]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "linked-list",
            "two-pointers"
        ]
    },
    {
        "id": 62,
        "title": "Unique Paths",
        "difficulty": "Medium",
        "acceptance": "64.9%",
        "constraints": [
            "1 <= m, n <= 100"
        ],
        "description": "There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\nGiven the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.\nThe test cases are generated so that the answer will be less than or equal to 2 * 109.",
        "examples": [
            {
                "input": "m = 3, n = 7",
                "output": "28",
                "explanation": ""
            },
            {
                "input": "m = 3, n = 2",
                "output": "3",
                "explanation": "From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -> Down -> Down\n2. Down -> Down -> Right\n3. Down -> Right -> Down"
            }
        ],
        "hints": [],
        "topics": [
            "math",
            "dynamic-programming",
            "combinatorics"
        ]
    },
    {
        "id": 63,
        "title": "Unique Paths II",
        "difficulty": "Medium",
        "acceptance": "42.3%",
        "constraints": [
            "m == obstacleGrid.length",
            "n == obstacleGrid[i].length",
            "1 <= m, n <= 100",
            "obstacleGrid[i][j] is 0 or 1."
        ],
        "description": "You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\nAn obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.\nReturn the number of possible unique paths that the robot can take to reach the bottom-right corner.\nThe testcases are generated so that the answer will be less than or equal to 2 * 109.",
        "examples": [
            {
                "input": "obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]",
                "output": "2",
                "explanation": "There is one obstacle in the middle of the 3x3 grid above.\nThere are two ways to reach the bottom-right corner:\n1. Right -> Right -> Down -> Down\n2. Down -> Down -> Right -> Right"
            },
            {
                "input": "obstacleGrid = [[0,1],[0,0]]",
                "output": "1",
                "explanation": ""
            }
        ],
        "hints": [
            "Use dynamic programming since, from each cell, you can move to the right or down.",
            "assume dp[i][j] is the number of unique paths to reach (i, j). dp[i][j] = dp[i][j -1] + dp[i - 1][j]. Be careful when you encounter an obstacle. set its value in dp to 0."
        ],
        "topics": [
            "array",
            "dynamic-programming",
            "matrix"
        ]
    },
    {
        "id": 64,
        "title": "Minimum Path Sum",
        "difficulty": "Medium",
        "acceptance": "65.1%",
        "constraints": [
            "m == grid.length",
            "n == grid[i].length",
            "1 <= m, n <= 200",
            "0 <= grid[i][j] <= 200"
        ],
        "description": "Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\nNote: You can only move either down or right at any point in time.",
        "examples": [
            {
                "input": "grid = [[1,3,1],[1,5,1],[4,2,1]]",
                "output": "7",
                "explanation": "Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum."
            },
            {
                "input": "grid = [[1,2,3],[4,5,6]]",
                "output": "12",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "dynamic-programming",
            "matrix"
        ]
    },
    {
        "id": 65,
        "title": "Valid Number",
        "difficulty": "Hard",
        "acceptance": "20.4%",
        "constraints": [
            "1 <= s.length <= 20",
            "s consists of only English letters (both uppercase and lowercase), digits (0-9), plus '+', minus '-', or dot '.'."
        ],
        "description": "Given a string s, return whether s is a valid number.\n\nFor example, all the following are valid numbers: \"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\", while the following are not valid numbers: \"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\".\nFormally, a valid number is defined using one of the following definitions:\nAn integer number followed by an optional exponent.\nA decimal number followed by an optional exponent.\nAn integer number is defined with an optional sign '-' or '+' followed by digits.\nA decimal number is defined with an optional sign '-' or '+' followed by one of the following definitions:\nDigits followed by a dot '.'.\nDigits followed by a dot '.' followed by digits.\nA dot '.' followed by digits.\nAn exponent is defined with an exponent notation 'e' or 'E' followed by an integer number.\nThe digits are defined as one or more digits.",
        "examples": [
            {
                "input": "s = \"0\"",
                "output": "true",
                "explanation": ""
            },
            {
                "input": "s = \"e\"",
                "output": "false",
                "explanation": ""
            },
            {
                "input": "s = \".\"",
                "output": "false",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "string"
        ]
    },
    {
        "id": 66,
        "title": "Plus One",
        "difficulty": "Easy",
        "acceptance": "46.3%",
        "constraints": [
            "1 <= digits.length <= 100",
            "0 <= digits[i] <= 9",
            "digits does not contain any leading 0's."
        ],
        "description": "You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.\nIncrement the large integer by one and return the resulting array of digits.",
        "examples": [
            {
                "input": "digits = [1,2,3]",
                "output": "[1,2,4]",
                "explanation": "The array represents the integer 123.\nIncrementing by one gives 123 + 1 = 124.\nThus, the result should be [1,2,4]."
            },
            {
                "input": "digits = [4,3,2,1]",
                "output": "[4,3,2,2]",
                "explanation": "The array represents the integer 4321.\nIncrementing by one gives 4321 + 1 = 4322.\nThus, the result should be [4,3,2,2]."
            },
            {
                "input": "digits = [9]",
                "output": "[1,0]",
                "explanation": "The array represents the integer 9.\nIncrementing by one gives 9 + 1 = 10.\nThus, the result should be [1,0]."
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "math"
        ]
    },
    {
        "id": 67,
        "title": "Add Binary",
        "difficulty": "Easy",
        "acceptance": "54.4%",
        "constraints": [
            "1 <= a.length, b.length <= 104",
            "a and b consist only of '0' or '1' characters.",
            "Each string does not contain leading zeros except for the zero itself."
        ],
        "description": "Given two binary strings a and b, return their sum as a binary string.",
        "examples": [
            {
                "input": "a = \"11\", b = \"1\"",
                "output": "\"100\"",
                "explanation": ""
            },
            {
                "input": "a = \"1010\", b = \"1011\"",
                "output": "\"10101\"",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "math",
            "string",
            "bit-manipulation",
            "simulation"
        ]
    },
    {
        "id": 68,
        "title": "Text Justification",
        "difficulty": "Hard",
        "acceptance": "45.4%",
        "constraints": [
            "1 <= words.length <= 300",
            "1 <= words[i].length <= 20",
            "words[i] consists of only English letters and symbols.",
            "1 <= maxWidth <= 100",
            "words[i].length <= maxWidth"
        ],
        "description": "Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.\nYou should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly maxWidth characters.\nExtra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\nFor the last line of text, it should be left-justified, and no extra space is inserted between words.\nNote:\nA word is defined as a character sequence consisting of non-space characters only.\nEach word's length is guaranteed to be greater than 0 and not exceed maxWidth.\nThe input array words contains at least one word.",
        "examples": [
            {
                "input": "words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16",
                "output": "[\n   \"This    is    an\",\n   \"example  of text\",\n   \"justification.  \"\n]",
                "explanation": ""
            },
            {
                "input": "words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16",
                "output": "[\n  \"What   must   be\",\n  \"acknowledgment  \",\n  \"shall be        \"\n]",
                "explanation": "Note that the last line is \"shall be    \" instead of \"shall     be\", because the last line must be left-justified instead of fully-justified.\nNote that the second line is also left-justified because it contains only one word."
            },
            {
                "input": "words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"], maxWidth = 20",
                "output": "[\n  \"Science  is  what we\",\n  \"understand      well\",\n  \"enough to explain to\",\n  \"a  computer.  Art is\",\n  \"everything  else  we\",\n  \"do                  \"\n]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "string",
            "simulation"
        ]
    },
    {
        "id": 69,
        "title": "Sqrt(x)",
        "difficulty": "Easy",
        "acceptance": "39.4%",
        "constraints": [
            "0 <= x <= 231 - 1"
        ],
        "description": "Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.\nYou must not use any built-in exponent function or operator.\nFor example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.",
        "examples": [
            {
                "input": "x = 4",
                "output": "2",
                "explanation": "The square root of 4 is 2, so we return 2."
            },
            {
                "input": "x = 8",
                "output": "2",
                "explanation": "The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned."
            }
        ],
        "hints": [
            "Try exploring all integers. (Credits: @annujoshi)",
            "Use the sorted property of integers to reduced the search space. (Credits: @annujoshi)"
        ],
        "topics": [
            "math",
            "binary-search"
        ]
    },
    {
        "id": 70,
        "title": "Climbing Stairs",
        "difficulty": "Easy",
        "acceptance": "53.2%",
        "constraints": [
            "1 <= n <= 45"
        ],
        "description": "You are climbing a staircase. It takes n steps to reach the top.\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
        "examples": [
            {
                "input": "n = 2",
                "output": "2",
                "explanation": "There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps"
            },
            {
                "input": "n = 3",
                "output": "3",
                "explanation": "There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step"
            }
        ],
        "hints": [
            "To reach nth step, what could have been your previous steps? (Think about the step sizes)"
        ],
        "topics": [
            "math",
            "dynamic-programming",
            "memoization"
        ]
    },
    {
        "id": 71,
        "title": "Simplify Path",
        "difficulty": "Medium",
        "acceptance": "44.5%",
        "constraints": [
            "1 <= path.length <= 3000",
            "path consists of English letters, digits, period '.', slash '/' or '_'.",
            "path is a valid absolute Unix path."
        ],
        "description": "You are given an absolute path for a Unix-style file system, which always begins with a slash '/'. Your task is to transform this absolute path into its simplified canonical path.\nThe rules of a Unix-style file system are as follows:\nA single period '.' represents the current directory.\nA double period '..' represents the previous/parent directory.\nMultiple consecutive slashes such as '//' and '///' are treated as a single slash '/'.\nAny sequence of periods that does not match the rules above should be treated as a valid directory or file name. For example, '...' and '....' are valid directory or file names.\nThe simplified canonical path should follow these rules:\nThe path must start with a single slash '/'.\nDirectories within the path must be separated by exactly one slash '/'.\nThe path must not end with a slash '/', unless it is the root directory.\nThe path must not have any single or double periods ('.' and '..') used to denote current or parent directories.\nReturn the simplified canonical path.",
        "examples": [
            {
                "input": "path = \"/home/\"",
                "output": "\"/home\"",
                "explanation": "The trailing slash should be removed."
            },
            {
                "input": "path = \"/home//foo/\"",
                "output": "\"/home/foo\"",
                "explanation": "Multiple consecutive slashes are replaced by a single one."
            },
            {
                "input": "path = \"/home/user/Documents/../Pictures\"",
                "output": "\"/home/user/Pictures\"",
                "explanation": "A double period \"..\" refers to the directory up a level (the parent directory)."
            },
            {
                "input": "path = \"/../\"",
                "output": "\"/\"",
                "explanation": "Going one level up from the root directory is not possible."
            },
            {
                "input": "path = \"/.../a/../b/c/../d/./\"",
                "output": "\"/.../b/d\"",
                "explanation": "\"...\" is a valid name for a directory in this problem."
            }
        ],
        "hints": [],
        "topics": [
            "string",
            "stack"
        ]
    },
    {
        "id": 72,
        "title": "Edit Distance",
        "difficulty": "Medium",
        "acceptance": "57.5%",
        "constraints": [
            "0 <= word1.length, word2.length <= 500",
            "word1 and word2 consist of lowercase English letters."
        ],
        "description": "Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\nYou have the following three operations permitted on a word:\nInsert a character\nDelete a character\nReplace a character",
        "examples": [
            {
                "input": "word1 = \"horse\", word2 = \"ros\"",
                "output": "3",
                "explanation": "horse -> rorse (replace 'h' with 'r')\nrorse -> rose (remove 'r')\nrose -> ros (remove 'e')"
            },
            {
                "input": "word1 = \"intention\", word2 = \"execution\"",
                "output": "5",
                "explanation": "intention -> inention (remove 't')\ninention -> enention (replace 'i' with 'e')\nenention -> exention (replace 'n' with 'x')\nexention -> exection (replace 'n' with 'c')\nexection -> execution (insert 'u')"
            }
        ],
        "hints": [],
        "topics": [
            "string",
            "dynamic-programming"
        ]
    },
    {
        "id": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": "Medium",
        "acceptance": "57.7%",
        "constraints": [
            "m == matrix.length",
            "n == matrix[0].length",
            "1 <= m, n <= 200",
            "-231 <= matrix[i][j] <= 231 - 1",
            "Follow up:",
            "A straightforward solution using O(mn) space is probably a bad idea.",
            "A simple improvement uses O(m + n) space, but still not the best solution.",
            "Could you devise a constant space solution?"
        ],
        "description": "Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.\nYou must do it in place.",
        "examples": [
            {
                "input": "matrix = [[1,1,1],[1,0,1],[1,1,1]]",
                "output": "[[1,0,1],[0,0,0],[1,0,1]]",
                "explanation": ""
            },
            {
                "input": "matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]",
                "output": "[[0,0,0,0],[0,4,5,0],[0,3,1,0]]",
                "explanation": ""
            }
        ],
        "hints": [
            "If any cell of the matrix has a zero we can record its row and column number using additional memory. But if you don't want to use extra memory then you can manipulate the array instead. i.e. simulating exactly what the question says.",
            "Setting cell values to zero on the fly while iterating might lead to discrepancies. What if you use some other integer value as your marker? There is still a better approach for this problem with 0(1) space.",
            "We could have used 2 sets to keep a record of rows/columns which need to be set to zero. But for an O(1) space solution, you can use one of the rows and and one of the columns to keep track of this information.",
            "We can use the first cell of every row and column as a flag. This flag would determine whether a row or column has been set to zero."
        ],
        "topics": [
            "array",
            "hash-table",
            "matrix"
        ]
    },
    {
        "id": 74,
        "title": "Search a 2D Matrix",
        "difficulty": "Medium",
        "acceptance": "51.2%",
        "constraints": [
            "m == matrix.length",
            "n == matrix[i].length",
            "1 <= m, n <= 100",
            "-104 <= matrix[i][j], target <= 104"
        ],
        "description": "You are given an m x n integer matrix matrix with the following two properties:\nEach row is sorted in non-decreasing order.\nThe first integer of each row is greater than the last integer of the previous row.\nGiven an integer target, return true if target is in matrix or false otherwise.\nYou must write a solution in O(log(m * n)) time complexity.",
        "examples": [
            {
                "input": "matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3",
                "output": "true",
                "explanation": ""
            },
            {
                "input": "matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13",
                "output": "false",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "binary-search",
            "matrix"
        ]
    },
    {
        "id": 75,
        "title": "Sort Colors",
        "difficulty": "Medium",
        "acceptance": "65.2%",
        "constraints": [
            "n == nums.length",
            "1 <= n <= 300",
            "nums[i] is either 0, 1, or 2.",
            "Follow up: Could you come up with a one-pass algorithm using only constant extra space?"
        ],
        "description": "Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\nWe will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.\nYou must solve this problem without using the library's sort function.",
        "examples": [
            {
                "input": "nums = [2,0,2,1,1,0]",
                "output": "[0,0,1,1,2,2]",
                "explanation": ""
            },
            {
                "input": "nums = [2,0,1]",
                "output": "[0,1,2]",
                "explanation": ""
            }
        ],
        "hints": [
            "A rather straight forward solution is a two-pass algorithm using counting sort.",
            "Iterate the array counting number of 0's, 1's, and 2's.",
            "Overwrite array with the total number of 0's, then 1's and followed by 2's."
        ],
        "topics": [
            "array",
            "two-pointers",
            "sorting"
        ]
    },
    {
        "id": 76,
        "title": "Minimum Window Substring",
        "difficulty": "Hard",
        "acceptance": "43.8%",
        "constraints": [
            "m == s.length",
            "n == t.length",
            "1 <= m, n <= 105",
            "s and t consist of uppercase and lowercase English letters.",
            "Follow up: Could you find an algorithm that runs in O(m + n) time?"
        ],
        "description": "Given two strings s and t of lengths m and n respectively, return the minimum window\nsubstring\nof s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\".\nThe testcases will be generated such that the answer is unique.",
        "examples": [
            {
                "input": "s = \"ADOBECODEBANC\", t = \"ABC\"",
                "output": "\"BANC\"",
                "explanation": "The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t."
            },
            {
                "input": "s = \"a\", t = \"a\"",
                "output": "\"a\"",
                "explanation": "The entire string s is the minimum window."
            },
            {
                "input": "s = \"a\", t = \"aa\"",
                "output": "\"\"",
                "explanation": "Both 'a's from t must be included in the window.\nSince the largest window of s only has one 'a', return empty string."
            }
        ],
        "hints": [
            "Use two pointers to create a window of letters in s, which would have all the characters from t.",
            "Expand the right pointer until all the characters of t are covered.",
            "Once all the characters are covered, move the left pointer and ensure that all the characters are still covered to minimize the subarray size.",
            "Continue expanding the right and left pointers until you reach the end of s."
        ],
        "topics": [
            "hash-table",
            "string",
            "sliding-window"
        ]
    },
    {
        "id": 77,
        "title": "Combinations",
        "difficulty": "Medium",
        "acceptance": "71.4%",
        "constraints": [
            "1 <= n <= 20",
            "1 <= k <= n"
        ],
        "description": "Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].\nYou may return the answer in any order.",
        "examples": [
            {
                "input": "n = 4, k = 2",
                "output": "[[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]",
                "explanation": "There are 4 choose 2 = 6 total combinations.\nNote that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination."
            },
            {
                "input": "n = 1, k = 1",
                "output": "[[1]]",
                "explanation": "There is 1 choose 1 = 1 total combination."
            }
        ],
        "hints": [],
        "topics": [
            "backtracking"
        ]
    },
    {
        "id": 78,
        "title": "Subsets",
        "difficulty": "Medium",
        "acceptance": "79.4%",
        "constraints": [
            "1 <= nums.length <= 10",
            "-10 <= nums[i] <= 10",
            "All the numbers of nums are unique."
        ],
        "description": "Given an integer array nums of unique elements, return all possible\nsubsets\n(the power set).\nThe solution set must not contain duplicate subsets. Return the solution in any order.",
        "examples": [
            {
                "input": "nums = [1,2,3]",
                "output": "[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]",
                "explanation": ""
            },
            {
                "input": "nums = [0]",
                "output": "[[],[0]]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "backtracking",
            "bit-manipulation"
        ]
    },
    {
        "id": 79,
        "title": "Word Search",
        "difficulty": "Medium",
        "acceptance": "43.7%",
        "constraints": [
            "m == board.length",
            "n = board[i].length",
            "1 <= m, n <= 6",
            "1 <= word.length <= 15",
            "board and word consists of only lowercase and uppercase English letters.",
            "Follow up: Could you use search pruning to make your solution faster with a larger board?"
        ],
        "description": "Given an m x n grid of characters board and a string word, return true if word exists in the grid.\nThe word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.",
        "examples": [
            {
                "input": "board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"",
                "output": "true",
                "explanation": ""
            },
            {
                "input": "board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"",
                "output": "true",
                "explanation": ""
            },
            {
                "input": "board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"",
                "output": "false",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "string",
            "backtracking",
            "matrix"
        ]
    },
    {
        "id": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": "Medium",
        "acceptance": "60.4%",
        "constraints": [
            "1 <= nums.length <= 3 * 104",
            "-104 <= nums[i] <= 104",
            "nums is sorted in non-decreasing order."
        ],
        "description": "Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same.\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\nReturn k after placing the final result in the first k slots of nums.\nDo not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\nCustom Judge:\nThe judge will test your solution with the following code:\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i < k; i++) {\n    assert nums[i] == expectedNums[i];\n}\nIf all assertions pass, then your solution will be accepted.",
        "examples": [
            {
                "input": "nums = [1,1,1,2,2,3]",
                "output": "5, nums = [1,1,2,2,3,_]",
                "explanation": "Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."
            },
            {
                "input": "nums = [0,0,1,1,1,1,2,3,3]",
                "output": "7, nums = [0,0,1,1,2,3,3,_,_]",
                "explanation": "Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "two-pointers"
        ]
    },
    {
        "id": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": "Medium",
        "acceptance": "38.2%",
        "constraints": [
            "1 <= nums.length <= 5000",
            "-104 <= nums[i] <= 104",
            "nums is guaranteed to be rotated at some pivot.",
            "-104 <= target <= 104",
            "Follow up: This problem is similar to Search in Rotated Sorted Array, but nums may contain duplicates. Would this affect the runtime complexity? How and why?"
        ],
        "description": "There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).\nBefore being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].\nGiven the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.\nYou must decrease the overall operation steps as much as possible.",
        "examples": [
            {
                "input": "nums = [2,5,6,0,0,1,2], target = 0",
                "output": "true",
                "explanation": ""
            },
            {
                "input": "nums = [2,5,6,0,0,1,2], target = 3",
                "output": "false",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "binary-search"
        ]
    },
    {
        "id": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": "Medium",
        "acceptance": "48.5%",
        "constraints": [
            "The number of nodes in the list is in the range [0, 300].",
            "-100 <= Node.val <= 100",
            "The list is guaranteed to be sorted in ascending order."
        ],
        "description": "Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.",
        "examples": [
            {
                "input": "head = [1,2,3,3,4,4,5]",
                "output": "[1,2,5]",
                "explanation": ""
            },
            {
                "input": "head = [1,1,1,2,3]",
                "output": "[2,3]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "linked-list",
            "two-pointers"
        ]
    },
    {
        "id": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": "Easy",
        "acceptance": "53.6%",
        "constraints": [
            "The number of nodes in the list is in the range [0, 300].",
            "-100 <= Node.val <= 100",
            "The list is guaranteed to be sorted in ascending order."
        ],
        "description": "Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.",
        "examples": [
            {
                "input": "head = [1,1,2]",
                "output": "[1,2]",
                "explanation": ""
            },
            {
                "input": "head = [1,1,2,3,3]",
                "output": "[1,2,3]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "linked-list"
        ]
    },
    {
        "id": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": "Hard",
        "acceptance": "45.7%",
        "constraints": [
            "1 <= heights.length <= 105",
            "0 <= heights[i] <= 104"
        ],
        "description": "Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.",
        "examples": [
            {
                "input": "heights = [2,1,5,6,2,3]",
                "output": "10",
                "explanation": "The above is a histogram where width of each bar is 1.\nThe largest rectangle is shown in the red area, which has an area = 10 units."
            },
            {
                "input": "heights = [2,4]",
                "output": "4",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "stack",
            "monotonic-stack"
        ]
    },
    {
        "id": 85,
        "title": "Maximal Rectangle",
        "difficulty": "Hard",
        "acceptance": "51.9%",
        "constraints": [
            "rows == matrix.length",
            "cols == matrix[i].length",
            "1 <= row, cols <= 200",
            "matrix[i][j] is '0' or '1'."
        ],
        "description": "Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.",
        "examples": [
            {
                "input": "matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]",
                "output": "6",
                "explanation": "The maximal rectangle is shown in the above picture."
            },
            {
                "input": "matrix = [[\"0\"]]",
                "output": "0",
                "explanation": ""
            },
            {
                "input": "matrix = [[\"1\"]]",
                "output": "1",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "dynamic-programming",
            "stack",
            "matrix",
            "monotonic-stack"
        ]
    },
    {
        "id": 86,
        "title": "Partition List",
        "difficulty": "Medium",
        "acceptance": "57.4%",
        "constraints": [
            "The number of nodes in the list is in the range [0, 200].",
            "-100 <= Node.val <= 100",
            "-200 <= x <= 200"
        ],
        "description": "Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.\nYou should preserve the original relative order of the nodes in each of the two partitions.",
        "examples": [
            {
                "input": "head = [1,4,3,2,5,2], x = 3",
                "output": "[1,2,2,4,3,5]",
                "explanation": ""
            },
            {
                "input": "head = [2,1], x = 2",
                "output": "[1,2]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "linked-list",
            "two-pointers"
        ]
    },
    {
        "id": 87,
        "title": "Scramble String",
        "difficulty": "Hard",
        "acceptance": "40.9%",
        "constraints": [
            "s1.length == s2.length",
            "1 <= s1.length <= 30",
            "s1 and s2 consist of lowercase English letters."
        ],
        "description": "We can scramble a string s to get a string t using the following algorithm:\nIf the length of the string is 1, stop.\nIf the length of the string is > 1, do the following:\nSplit the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.\nRandomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.\nApply step 1 recursively on each of the two substrings x and y.\nGiven two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.",
        "examples": [
            {
                "input": "s1 = \"great\", s2 = \"rgeat\"",
                "output": "true",
                "explanation": "One possible scenario applied on s1 is:\n\"great\" --> \"gr/eat\" // divide at random index.\n\"gr/eat\" --> \"gr/eat\" // random decision is not to swap the two substrings and keep them in order.\n\"gr/eat\" --> \"g/r / e/at\" // apply the same algorithm recursively on both substrings. divide at random index each of them.\n\"g/r / e/at\" --> \"r/g / e/at\" // random decision was to swap the first substring and to keep the second substring in the same order.\n\"r/g / e/at\" --> \"r/g / e/ a/t\" // again apply the algorithm recursively, divide \"at\" to \"a/t\".\n\"r/g / e/ a/t\" --> \"r/g / e/ a/t\" // random decision is to keep both substrings in the same order.\nThe algorithm stops now, and the result string is \"rgeat\" which is s2.\nAs one possible scenario led s1 to be scrambled to s2, we return true."
            },
            {
                "input": "s1 = \"abcde\", s2 = \"caebd\"",
                "output": "false",
                "explanation": ""
            },
            {
                "input": "s1 = \"a\", s2 = \"a\"",
                "output": "true",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "string",
            "dynamic-programming"
        ]
    },
    {
        "id": 88,
        "title": "Merge Sorted Array",
        "difficulty": "Easy",
        "acceptance": "51.2%",
        "constraints": [
            "nums1.length == m + n",
            "nums2.length == n",
            "0 <= m, n <= 200",
            "1 <= m + n <= 200",
            "-109 <= nums1[i], nums2[j] <= 109",
            "Follow up: Can you come up with an algorithm that runs in O(m + n) time?"
        ],
        "description": "You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.\nMerge nums1 and nums2 into a single array sorted in non-decreasing order.\nThe final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.",
        "examples": [
            {
                "input": "nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3",
                "output": "[1,2,2,3,5,6]",
                "explanation": "The arrays we are merging are [1,2,3] and [2,5,6].\nThe result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1."
            },
            {
                "input": "nums1 = [1], m = 1, nums2 = [], n = 0",
                "output": "[1]",
                "explanation": "The arrays we are merging are [1] and [].\nThe result of the merge is [1]."
            },
            {
                "input": "nums1 = [0], m = 0, nums2 = [1], n = 1",
                "output": "[1]",
                "explanation": "The arrays we are merging are [] and [1].\nThe result of the merge is [1].\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1."
            }
        ],
        "hints": [
            "You can easily solve this problem if you simply think about two elements at a time rather than two arrays. We know that each of the individual arrays is sorted. What we don't know is how they will intertwine. Can we take a local decision and arrive at an optimal solution?",
            "If you simply consider one element each at a time from the two arrays and make a decision and proceed accordingly, you will arrive at the optimal solution."
        ],
        "topics": [
            "array",
            "two-pointers",
            "sorting"
        ]
    },
    {
        "id": 89,
        "title": "Gray Code",
        "difficulty": "Medium",
        "acceptance": "0%",
        "constraints": [
            "1 <= n <= 16"
        ],
        "description": "An n-bit gray code sequence is a sequence of 2n integers where:\nEvery integer is in the inclusive range [0, 2n - 1],\nThe first integer is 0,\nAn integer appears no more than once in the sequence,\nThe binary representation of every pair of adjacent integers differs by exactly one bit, and\nThe binary representation of the first and last integers differs by exactly one bit.\nGiven an integer n, return any valid n-bit gray code sequence.",
        "examples": [
            {
                "input": "n = 2",
                "output": "[0,1,3,2]",
                "explanation": "The binary representation of [0,1,3,2] is [00,01,11,10].\n- 00 and 01 differ by one bit\n- 01 and 11 differ by one bit\n- 11 and 10 differ by one bit\n- 10 and 00 differ by one bit\n[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].\n- 00 and 10 differ by one bit\n- 10 and 11 differ by one bit\n- 11 and 01 differ by one bit\n- 01 and 00 differ by one bit"
            },
            {
                "input": "n = 1",
                "output": "[0,1]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "math",
            "backtracking",
            "bit-manipulation"
        ]
    },
    {
        "id": 90,
        "title": "Subsets II",
        "difficulty": "Medium",
        "acceptance": "58.2%",
        "constraints": [
            "1 <= nums.length <= 10",
            "-10 <= nums[i] <= 10"
        ],
        "description": "Given an integer array nums that may contain duplicates, return all possible\nsubsets\n(the power set).\nThe solution set must not contain duplicate subsets. Return the solution in any order.",
        "examples": [
            {
                "input": "nums = [1,2,2]",
                "output": "[[],[1],[1,2],[1,2,2],[2],[2,2]]",
                "explanation": ""
            },
            {
                "input": "nums = [0]",
                "output": "[[],[0]]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "backtracking",
            "bit-manipulation"
        ]
    },
    {
        "id": 91,
        "title": "Decode Ways",
        "difficulty": "Medium",
        "acceptance": "35.5%",
        "constraints": [
            "1 <= s.length <= 100",
            "s contains only digits and may contain leading zero(s)."
        ],
        "description": "You have intercepted a secret message encoded as a string of numbers. The message is decoded via the following mapping:\n\"1\" -> 'A'\n\"2\" -> 'B'\n...\n\"25\" -> 'Y'\n\"26\" -> 'Z'\nHowever, while decoding the message, you realize that there are many different ways you can decode the message because some codes are contained in other codes (\"2\" and \"5\" vs \"25\").\nFor example, \"11106\" can be decoded into:\n\"AAJF\" with the grouping (1, 1, 10, 6)\n\"KJF\" with the grouping (11, 10, 6)\nThe grouping (1, 11, 06) is invalid because \"06\" is not a valid code (only \"6\" is valid).\nNote: there may be strings that are impossible to decode.\n\nGiven a string s containing only digits, return the number of ways to decode it. If the entire string cannot be decoded in any valid way, return 0.\nThe test cases are generated so that the answer fits in a 32-bit integer.",
        "examples": [
            {
                "input": "s = \"12\"",
                "output": "2",
                "explanation": "\"12\" could be decoded as \"AB\" (1 2) or \"L\" (12)."
            },
            {
                "input": "s = \"226\"",
                "output": "3",
                "explanation": "\"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6)."
            },
            {
                "input": "s = \"06\"",
                "output": "0",
                "explanation": "\"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\"). In this case, the string is not a valid encoding, so return 0."
            }
        ],
        "hints": [],
        "topics": [
            "string",
            "dynamic-programming"
        ]
    },
    {
        "id": 92,
        "title": "Reverse Linked List II",
        "difficulty": "Medium",
        "acceptance": "48.4%",
        "constraints": [
            "The number of nodes in the list is n.",
            "1 <= n <= 500",
            "-500 <= Node.val <= 500",
            "1 <= left <= right <= n",
            "Follow up: Could you do it in one pass?"
        ],
        "description": "Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.",
        "examples": [
            {
                "input": "head = [1,2,3,4,5], left = 2, right = 4",
                "output": "[1,4,3,2,5]",
                "explanation": ""
            },
            {
                "input": "head = [5], left = 1, right = 1",
                "output": "[5]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "linked-list"
        ]
    },
    {
        "id": 93,
        "title": "Restore IP Addresses",
        "difficulty": "Medium",
        "acceptance": "51.2%",
        "constraints": [
            "1 <= s.length <= 20",
            "s consists of digits only."
        ],
        "description": "A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.\nFor example, \"0.1.2.201\" and \"192.168.1.1\" are valid IP addresses, but \"0.011.255.245\", \"192.168.1.312\" and \"192.168@1.1\" are invalid IP addresses.\nGiven a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.",
        "examples": [
            {
                "input": "s = \"25525511135\"",
                "output": "[\"255.255.11.135\",\"255.255.111.35\"]",
                "explanation": ""
            },
            {
                "input": "s = \"0000\"",
                "output": "[\"0.0.0.0\"]",
                "explanation": ""
            },
            {
                "input": "s = \"101023\"",
                "output": "[\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "string",
            "backtracking"
        ]
    },
    {
        "id": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": "Easy",
        "acceptance": "77.2%",
        "constraints": [
            "The number of nodes in the tree is in the range [0, 100].",
            "-100 <= Node.val <= 100",
            "Follow up: Recursive solution is trivial, could you do it iteratively?"
        ],
        "description": "Given the root of a binary tree, return the inorder traversal of its nodes' values.",
        "examples": [
            {
                "input": "root = [1,null,2,3]",
                "output": "[1,3,2]",
                "explanation": ""
            },
            {
                "input": "root = [1,2,3,4,5,null,8,null,null,6,7,9]",
                "output": "[4,2,6,5,7,1,3,9,8]",
                "explanation": ""
            },
            {
                "input": "root = []",
                "output": "[]",
                "explanation": ""
            },
            {
                "input": "root = [1]",
                "output": "[1]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "stack",
            "tree",
            "depth-first-search",
            "binary-tree"
        ]
    },
    {
        "id": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": "Medium",
        "acceptance": "58.8%",
        "constraints": [
            "1 <= n <= 8"
        ],
        "description": "Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.",
        "examples": [
            {
                "input": "n = 3",
                "output": "[[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]",
                "explanation": ""
            },
            {
                "input": "n = 1",
                "output": "[[1]]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "dynamic-programming",
            "backtracking",
            "tree",
            "binary-search-tree",
            "binary-tree"
        ]
    },
    {
        "id": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": "Medium",
        "acceptance": "61.7%",
        "constraints": [
            "1 <= n <= 19"
        ],
        "description": "Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.",
        "examples": [
            {
                "input": "n = 3",
                "output": "5",
                "explanation": ""
            },
            {
                "input": "n = 1",
                "output": "1",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "math",
            "dynamic-programming",
            "tree",
            "binary-search-tree",
            "binary-tree"
        ]
    },
    {
        "id": 97,
        "title": "Interleaving String",
        "difficulty": "Medium",
        "acceptance": "40.7%",
        "constraints": [
            "0 <= s1.length, s2.length <= 100",
            "0 <= s3.length <= 200",
            "s1, s2, and s3 consist of lowercase English letters.",
            "Follow up: Could you solve it using only O(s2.length) additional memory space?"
        ],
        "description": "Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.\nAn interleaving of two strings s and t is a configuration where s and t are divided into n and m\nsubstrings\nrespectively, such that:\ns = s1 + s2 + ... + sn\nt = t1 + t2 + ... + tm\n|n - m| <= 1\nThe interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\nNote: a + b is the concatenation of strings a and b.",
        "examples": [
            {
                "input": "s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"",
                "output": "true",
                "explanation": "One way to obtain s3 is:\nSplit s1 into s1 = \"aa\" + \"bc\" + \"c\", and s2 into s2 = \"dbbc\" + \"a\".\nInterleaving the two splits, we get \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\".\nSince s3 can be obtained by interleaving s1 and s2, we return true."
            },
            {
                "input": "s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"",
                "output": "false",
                "explanation": "Notice how it is impossible to interleave s2 with any other string to obtain s3."
            },
            {
                "input": "s1 = \"\", s2 = \"\", s3 = \"\"",
                "output": "true",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "string",
            "dynamic-programming"
        ]
    },
    {
        "id": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": "Medium",
        "acceptance": "33.5%",
        "constraints": [
            "The number of nodes in the tree is in the range [1, 104].",
            "-231 <= Node.val <= 231 - 1"
        ],
        "description": "Given the root of a binary tree, determine if it is a valid binary search tree (BST).\nA valid BST is defined as follows:\nThe left\nsubtree\nof a node contains only nodes with keys less than the node's key.\nThe right subtree of a node contains only nodes with keys greater than the node's key.\nBoth the left and right subtrees must also be binary search trees.",
        "examples": [
            {
                "input": "root = [2,1,3]",
                "output": "true",
                "explanation": ""
            },
            {
                "input": "root = [5,1,4,null,null,3,6]",
                "output": "false",
                "explanation": "The root node's value is 5 but its right child's value is 4."
            }
        ],
        "hints": [],
        "topics": [
            "tree",
            "depth-first-search",
            "binary-search-tree",
            "binary-tree"
        ]
    },
    {
        "id": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": "Medium",
        "acceptance": "54.4%",
        "constraints": [
            "The number of nodes in the tree is in the range [2, 1000].",
            "-231 <= Node.val <= 231 - 1",
            "Follow up: A solution using O(n) space is pretty straight-forward. Could you devise a constant O(1) space solution?"
        ],
        "description": "You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.",
        "examples": [
            {
                "input": "root = [1,3,null,null,2]",
                "output": "[3,1,null,null,2]",
                "explanation": "3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid."
            },
            {
                "input": "root = [3,1,4,null,null,2]",
                "output": "[2,1,4,null,null,3]",
                "explanation": "2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid."
            }
        ],
        "hints": [],
        "topics": [
            "tree",
            "depth-first-search",
            "binary-search-tree",
            "binary-tree"
        ]
    },
    {
        "id": 100,
        "title": "Same Tree",
        "difficulty": "Easy",
        "acceptance": "63.5%",
        "constraints": [
            "The number of nodes in both trees is in the range [0, 100].",
            "-104 <= Node.val <= 104"
        ],
        "description": "Given the roots of two binary trees p and q, write a function to check if they are the same or not.\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.",
        "examples": [
            {
                "input": "p = [1,2,3], q = [1,2,3]",
                "output": "true",
                "explanation": ""
            },
            {
                "input": "p = [1,2], q = [1,null,2]",
                "output": "false",
                "explanation": ""
            },
            {
                "input": "p = [1,2,1], q = [1,1,2]",
                "output": "false",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "tree",
            "depth-first-search",
            "breadth-first-search",
            "binary-tree"
        ]
    },
    {
        "id": 101,
        "title": "Symmetric Tree",
        "difficulty": "Easy",
        "acceptance": "57.7%",
        "constraints": [
            "The number of nodes in the tree is in the range [1, 1000].",
            "-100 <= Node.val <= 100",
            "Follow up: Could you solve it both recursively and iteratively?"
        ],
        "description": "Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).",
        "examples": [
            {
                "input": "root = [1,2,2,3,4,4,3]",
                "output": "true",
                "explanation": ""
            },
            {
                "input": "root = [1,2,2,null,3,null,3]",
                "output": "false",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "tree",
            "depth-first-search",
            "breadth-first-search",
            "binary-tree"
        ]
    },
    {
        "id": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": "Medium",
        "acceptance": "68.7%",
        "constraints": [
            "The number of nodes in the tree is in the range [0, 2000].",
            "-1000 <= Node.val <= 1000"
        ],
        "description": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).",
        "examples": [
            {
                "input": "root = [3,9,20,null,null,15,7]",
                "output": "[[3],[9,20],[15,7]]",
                "explanation": ""
            },
            {
                "input": "root = [1]",
                "output": "[[1]]",
                "explanation": ""
            },
            {
                "input": "root = []",
                "output": "[]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "tree",
            "breadth-first-search",
            "binary-tree"
        ]
    },
    {
        "id": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": "Medium",
        "acceptance": "60.1%",
        "constraints": [
            "The number of nodes in the tree is in the range [0, 2000].",
            "-100 <= Node.val <= 100"
        ],
        "description": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).",
        "examples": [
            {
                "input": "root = [3,9,20,null,null,15,7]",
                "output": "[[3],[20,9],[15,7]]",
                "explanation": ""
            },
            {
                "input": "root = [1]",
                "output": "[[1]]",
                "explanation": ""
            },
            {
                "input": "root = []",
                "output": "[]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "tree",
            "breadth-first-search",
            "binary-tree"
        ]
    },
    {
        "id": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": "Easy",
        "acceptance": "76.2%",
        "constraints": [
            "The number of nodes in the tree is in the range [0, 104].",
            "-100 <= Node.val <= 100"
        ],
        "description": "Given the root of a binary tree, return its maximum depth.\nA binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.",
        "examples": [
            {
                "input": "root = [3,9,20,null,null,15,7]",
                "output": "3",
                "explanation": ""
            },
            {
                "input": "root = [1,null,2]",
                "output": "2",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "tree",
            "depth-first-search",
            "breadth-first-search",
            "binary-tree"
        ]
    },
    {
        "id": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": "Medium",
        "acceptance": "65.2%",
        "constraints": [
            "1 <= preorder.length <= 3000",
            "inorder.length == preorder.length",
            "-3000 <= preorder[i], inorder[i] <= 3000",
            "preorder and inorder consist of unique values.",
            "Each value of inorder also appears in preorder.",
            "preorder is guaranteed to be the preorder traversal of the tree.",
            "inorder is guaranteed to be the inorder traversal of the tree."
        ],
        "description": "Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.",
        "examples": [
            {
                "input": "preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]",
                "output": "[3,9,20,null,null,15,7]",
                "explanation": ""
            },
            {
                "input": "preorder = [-1], inorder = [-1]",
                "output": "[-1]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "hash-table",
            "divide-and-conquer",
            "tree",
            "binary-tree"
        ]
    },
    {
        "id": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": "Medium",
        "acceptance": "64.5%",
        "constraints": [
            "1 <= inorder.length <= 3000",
            "postorder.length == inorder.length",
            "-3000 <= inorder[i], postorder[i] <= 3000",
            "inorder and postorder consist of unique values.",
            "Each value of postorder also appears in inorder.",
            "inorder is guaranteed to be the inorder traversal of the tree.",
            "postorder is guaranteed to be the postorder traversal of the tree."
        ],
        "description": "Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.",
        "examples": [
            {
                "input": "inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]",
                "output": "[3,9,20,null,null,15,7]",
                "explanation": ""
            },
            {
                "input": "inorder = [-1], postorder = [-1]",
                "output": "[-1]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "hash-table",
            "divide-and-conquer",
            "tree",
            "binary-tree"
        ]
    },
    {
        "id": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": "Medium",
        "acceptance": "64.5%",
        "constraints": [
            "The number of nodes in the tree is in the range [0, 2000].",
            "-1000 <= Node.val <= 1000"
        ],
        "description": "Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).",
        "examples": [
            {
                "input": "root = [3,9,20,null,null,15,7]",
                "output": "[[15,7],[9,20],[3]]",
                "explanation": ""
            },
            {
                "input": "root = [1]",
                "output": "[[1]]",
                "explanation": ""
            },
            {
                "input": "root = []",
                "output": "[]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "tree",
            "breadth-first-search",
            "binary-tree"
        ]
    },
    {
        "id": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": "Easy",
        "acceptance": "72.8%",
        "constraints": [
            "1 <= nums.length <= 104",
            "-104 <= nums[i] <= 104",
            "nums is sorted in a strictly increasing order."
        ],
        "description": "Given an integer array nums where the elements are sorted in ascending order, convert it to a\nheight-balanced\nbinary search tree.",
        "examples": [
            {
                "input": "nums = [-10,-3,0,5,9]",
                "output": "[0,-3,9,-10,null,5]",
                "explanation": "[0,-10,5,null,-3,null,9] is also accepted:"
            },
            {
                "input": "nums = [1,3]",
                "output": "[3,1]",
                "explanation": "[1,null,3] and [3,1] are both height-balanced BSTs."
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "divide-and-conquer",
            "tree",
            "binary-search-tree",
            "binary-tree"
        ]
    },
    {
        "id": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": "Medium",
        "acceptance": "62.9%",
        "constraints": [
            "The number of nodes in head is in the range [0, 2 * 104].",
            "-105 <= Node.val <= 105"
        ],
        "description": "Given the head of a singly linked list where elements are sorted in ascending order, convert it to a\nheight-balanced\nbinary search tree.",
        "examples": [
            {
                "input": "head = [-10,-3,0,5,9]",
                "output": "[0,-3,9,-10,null,5]",
                "explanation": "One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST."
            },
            {
                "input": "head = []",
                "output": "[]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "linked-list",
            "divide-and-conquer",
            "tree",
            "binary-search-tree",
            "binary-tree"
        ]
    },
    {
        "id": 110,
        "title": "Balanced Binary Tree",
        "difficulty": "Easy",
        "acceptance": "53.6%",
        "constraints": [
            "The number of nodes in the tree is in the range [0, 5000].",
            "-104 <= Node.val <= 104"
        ],
        "description": "Given a binary tree, determine if it is\nheight-balanced\n.",
        "examples": [
            {
                "input": "root = [3,9,20,null,null,15,7]",
                "output": "true",
                "explanation": ""
            },
            {
                "input": "root = [1,2,2,3,3,null,null,4,4]",
                "output": "false",
                "explanation": ""
            },
            {
                "input": "root = []",
                "output": "true",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "tree",
            "depth-first-search",
            "binary-tree"
        ]
    },
    {
        "id": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": "Easy",
        "acceptance": "49.1%",
        "constraints": [
            "The number of nodes in the tree is in the range [0, 105].",
            "-1000 <= Node.val <= 1000"
        ],
        "description": "Given a binary tree, find its minimum depth.\nThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\nNote: A leaf is a node with no children.",
        "examples": [
            {
                "input": "root = [3,9,20,null,null,15,7]",
                "output": "2",
                "explanation": ""
            },
            {
                "input": "root = [2,null,3,null,4,null,5,null,6]",
                "output": "5",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "tree",
            "depth-first-search",
            "breadth-first-search",
            "binary-tree"
        ]
    },
    {
        "id": 112,
        "title": "Path Sum",
        "difficulty": "Easy",
        "acceptance": "51.5%",
        "constraints": [
            "The number of nodes in the tree is in the range [0, 5000].",
            "-1000 <= Node.val <= 1000",
            "-1000 <= targetSum <= 1000"
        ],
        "description": "Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.\nA leaf is a node with no children.",
        "examples": [
            {
                "input": "root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22",
                "output": "true",
                "explanation": "The root-to-leaf path with the target sum is shown."
            },
            {
                "input": "root = [1,2,3], targetSum = 5",
                "output": "false",
                "explanation": "There two root-to-leaf paths in the tree:\n(1 --> 2): The sum is 3.\n(1 --> 3): The sum is 4.\nThere is no root-to-leaf path with sum = 5."
            },
            {
                "input": "root = [], targetSum = 0",
                "output": "false",
                "explanation": "Since the tree is empty, there are no root-to-leaf paths."
            }
        ],
        "hints": [],
        "topics": [
            "tree",
            "depth-first-search",
            "breadth-first-search",
            "binary-tree"
        ]
    },
    {
        "id": 113,
        "title": "Path Sum II",
        "difficulty": "Medium",
        "acceptance": "59.3%",
        "constraints": [
            "The number of nodes in the tree is in the range [0, 5000].",
            "-1000 <= Node.val <= 1000",
            "-1000 <= targetSum <= 1000"
        ],
        "description": "Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.\nA root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.",
        "examples": [
            {
                "input": "root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22",
                "output": "[[5,4,11,2],[5,8,4,5]]",
                "explanation": "There are two paths whose sum equals targetSum:\n5 + 4 + 11 + 2 = 22\n5 + 8 + 4 + 5 = 22"
            },
            {
                "input": "root = [1,2,3], targetSum = 5",
                "output": "[]",
                "explanation": ""
            },
            {
                "input": "root = [1,2], targetSum = 0",
                "output": "[]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "backtracking",
            "tree",
            "depth-first-search",
            "binary-tree"
        ]
    },
    {
        "id": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": "Medium",
        "acceptance": "66.6%",
        "constraints": [
            "The number of nodes in the tree is in the range [0, 2000].",
            "-100 <= Node.val <= 100",
            "Follow up: Can you flatten the tree in-place (with O(1) extra space)?"
        ],
        "description": "Given the root of a binary tree, flatten the tree into a \"linked list\":\nThe \"linked list\" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.\nThe \"linked list\" should be in the same order as a pre-order traversal of the binary tree.",
        "examples": [
            {
                "input": "root = [1,2,5,3,4,null,6]",
                "output": "[1,null,2,null,3,null,4,null,5,null,6]",
                "explanation": ""
            },
            {
                "input": "root = []",
                "output": "[]",
                "explanation": ""
            },
            {
                "input": "root = [0]",
                "output": "[0]",
                "explanation": ""
            }
        ],
        "hints": [
            "If you notice carefully in the flattened tree, each node's right child points to the next node of a pre-order traversal."
        ],
        "topics": [
            "linked-list",
            "stack",
            "tree",
            "depth-first-search",
            "binary-tree"
        ]
    },
    {
        "id": 115,
        "title": "Distinct Subsequences",
        "difficulty": "Hard",
        "acceptance": "48.5%",
        "constraints": [
            "1 <= s.length, t.length <= 1000",
            "s and t consist of English letters."
        ],
        "description": "Given two strings s and t, return the number of distinct subsequences of s which equals t.\nThe test cases are generated so that the answer fits on a 32-bit signed integer.",
        "examples": [
            {
                "input": "s = \"rabbbit\", t = \"rabbit\"",
                "output": "3",
                "explanation": "As shown below, there are 3 ways you can generate \"rabbit\" from s.\nrabbbit\nrabbbit\nrabbbit"
            },
            {
                "input": "s = \"babgbag\", t = \"bag\"",
                "output": "5",
                "explanation": "As shown below, there are 5 ways you can generate \"bag\" from s.\nbabgbag\nbabgbag\nbabgbag\nbabgbag\nbabgbag"
            }
        ],
        "hints": [],
        "topics": [
            "string",
            "dynamic-programming"
        ]
    },
    {
        "id": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": "Medium",
        "acceptance": "63.8%",
        "constraints": [
            "The number of nodes in the tree is in the range [0, 212 - 1].",
            "-1000 <= Node.val <= 1000",
            "Follow-up:",
            "You may only use constant extra space.",
            "The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem."
        ],
        "description": "You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\nInitially, all next pointers are set to NULL.",
        "examples": [
            {
                "input": "root = [1,2,3,4,5,6,7]",
                "output": "[1,#,2,3,#,4,5,6,7,#]",
                "explanation": "Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level."
            },
            {
                "input": "root = []",
                "output": "[]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "linked-list",
            "tree",
            "depth-first-search",
            "breadth-first-search",
            "binary-tree"
        ]
    },
    {
        "id": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": "Medium",
        "acceptance": "53.7%",
        "constraints": [
            "The number of nodes in the tree is in the range [0, 6000].",
            "-100 <= Node.val <= 100",
            "Follow-up:",
            "You may only use constant extra space.",
            "The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem."
        ],
        "description": "Given a binary tree\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\nInitially, all next pointers are set to NULL.",
        "examples": [
            {
                "input": "root = [1,2,3,4,5,null,7]",
                "output": "[1,#,2,3,#,4,5,7,#]",
                "explanation": "Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level."
            },
            {
                "input": "root = []",
                "output": "[]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "linked-list",
            "tree",
            "depth-first-search",
            "breadth-first-search",
            "binary-tree"
        ]
    },
    {
        "id": 118,
        "title": "Pascal's Triangle",
        "difficulty": "Easy",
        "acceptance": "75.5%",
        "constraints": [
            "1 <= numRows <= 30"
        ],
        "description": "Given an integer numRows, return the first numRows of Pascal's triangle.\nIn Pascal's triangle, each number is the sum of the two numbers directly above it as shown:",
        "examples": [
            {
                "input": "numRows = 5",
                "output": "[[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]",
                "explanation": ""
            },
            {
                "input": "numRows = 1",
                "output": "[[1]]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "dynamic-programming"
        ]
    },
    {
        "id": 119,
        "title": "Pascal's Triangle II",
        "difficulty": "Easy",
        "acceptance": "64.8%",
        "constraints": [
            "0 <= rowIndex <= 33",
            "Follow up: Could you optimize your algorithm to use only O(rowIndex) extra space?"
        ],
        "description": "Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.\nIn Pascal's triangle, each number is the sum of the two numbers directly above it as shown:",
        "examples": [
            {
                "input": "rowIndex = 3",
                "output": "[1,3,3,1]",
                "explanation": ""
            },
            {
                "input": "rowIndex = 0",
                "output": "[1]",
                "explanation": ""
            },
            {
                "input": "rowIndex = 1",
                "output": "[1,1]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "dynamic-programming"
        ]
    },
    {
        "id": 120,
        "title": "Triangle",
        "difficulty": "Medium",
        "acceptance": "57.8%",
        "constraints": [
            "1 <= triangle.length <= 200",
            "triangle[0].length == 1",
            "triangle[i].length == triangle[i - 1].length + 1",
            "-104 <= triangle[i][j] <= 104",
            "Follow up: Could you do this using only O(n) extra space, where n is the total number of rows in the triangle?"
        ],
        "description": "Given a triangle array, return the minimum path sum from top to bottom.\nFor each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.",
        "examples": [
            {
                "input": "triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]",
                "output": "11",
                "explanation": "The triangle looks like:\n   2\n  3 4\n 6 5 7\n4 1 8 3\nThe minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above)."
            },
            {
                "input": "triangle = [[-10]]",
                "output": "-10",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "dynamic-programming"
        ]
    },
    {
        "id": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": "Easy",
        "acceptance": "54.2%",
        "constraints": [
            "1 <= prices.length <= 105",
            "0 <= prices[i] <= 104"
        ],
        "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day.\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
        "examples": [
            {
                "input": "prices = [7,1,5,3,6,4]",
                "output": "5",
                "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell."
            },
            {
                "input": "prices = [7,6,4,3,1]",
                "output": "0",
                "explanation": "In this case, no transactions are done and the max profit = 0."
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "dynamic-programming"
        ]
    },
    {
        "id": 122,
        "title": "Best Time to Buy and Sell Stock II",
        "difficulty": "Medium",
        "acceptance": "67.8%",
        "constraints": [
            "1 <= prices.length <= 3 * 104",
            "0 <= prices[i] <= 104"
        ],
        "description": "You are given an integer array prices where prices[i] is the price of a given stock on the ith day.\nOn each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.\nFind and return the maximum profit you can achieve.",
        "examples": [
            {
                "input": "prices = [7,1,5,3,6,4]",
                "output": "7",
                "explanation": "Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\nThen buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\nTotal profit is 4 + 3 = 7."
            },
            {
                "input": "prices = [1,2,3,4,5]",
                "output": "4",
                "explanation": "Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nTotal profit is 4."
            },
            {
                "input": "prices = [7,6,4,3,1]",
                "output": "0",
                "explanation": "There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0."
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "dynamic-programming",
            "greedy"
        ]
    },
    {
        "id": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": "Hard",
        "acceptance": "49.3%",
        "constraints": [
            "1 <= prices.length <= 105",
            "0 <= prices[i] <= 105"
        ],
        "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day.\nFind the maximum profit you can achieve. You may complete at most two transactions.\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).",
        "examples": [
            {
                "input": "prices = [3,3,5,0,0,3,1,4]",
                "output": "6",
                "explanation": "Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\nThen buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3."
            },
            {
                "input": "prices = [1,2,3,4,5]",
                "output": "4",
                "explanation": "Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nNote that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again."
            },
            {
                "input": "prices = [7,6,4,3,1]",
                "output": "0",
                "explanation": "In this case, no transaction is done, i.e. max profit = 0."
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "dynamic-programming"
        ]
    },
    {
        "id": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": "Hard",
        "acceptance": "40.5%",
        "constraints": [
            "The number of nodes in the tree is in the range [1, 3 * 104].",
            "-1000 <= Node.val <= 1000"
        ],
        "description": "A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\nThe path sum of a path is the sum of the node's values in the path.\nGiven the root of a binary tree, return the maximum path sum of any non-empty path.",
        "examples": [
            {
                "input": "root = [1,2,3]",
                "output": "6",
                "explanation": "The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6."
            },
            {
                "input": "root = [-10,9,20,null,null,15,7]",
                "output": "42",
                "explanation": "The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42."
            }
        ],
        "hints": [],
        "topics": [
            "dynamic-programming",
            "tree",
            "depth-first-search",
            "binary-tree"
        ]
    },
    {
        "id": 125,
        "title": "Valid Palindrome",
        "difficulty": "Easy",
        "acceptance": "48.9%",
        "constraints": [
            "1 <= s.length <= 2 * 105",
            "s consists only of printable ASCII characters."
        ],
        "description": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\nGiven a string s, return true if it is a palindrome, or false otherwise.",
        "examples": [
            {
                "input": "s = \"A man, a plan, a canal: Panama\"",
                "output": "true",
                "explanation": "\"amanaplanacanalpanama\" is a palindrome."
            },
            {
                "input": "s = \"race a car\"",
                "output": "false",
                "explanation": "\"raceacar\" is not a palindrome."
            },
            {
                "input": "s = \" \"",
                "output": "true",
                "explanation": "s is an empty string \"\" after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome."
            }
        ],
        "hints": [],
        "topics": [
            "two-pointers",
            "string"
        ]
    },
    {
        "id": 126,
        "title": "Word Ladder II",
        "difficulty": "Hard",
        "acceptance": "27.1%",
        "constraints": [
            "1 <= beginWord.length <= 5",
            "endWord.length == beginWord.length",
            "1 <= wordList.length <= 500",
            "wordList[i].length == beginWord.length",
            "beginWord, endWord, and wordList[i] consist of lowercase English letters.",
            "beginWord != endWord",
            "All the words in wordList are unique.",
            "The sum of all shortest transformation sequences does not exceed 105."
        ],
        "description": "A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:\nEvery adjacent pair of words differs by a single letter.\nEvery si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\nsk == endWord\nGiven two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2, ..., sk].",
        "examples": [
            {
                "input": "beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]",
                "output": "[[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]",
                "explanation": "There are 2 shortest transformation sequences:\n\"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\"\n\"hit\" -> \"hot\" -> \"lot\" -> \"log\" -> \"cog\""
            },
            {
                "input": "beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]",
                "output": "[]",
                "explanation": "The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence."
            }
        ],
        "hints": [],
        "topics": [
            "hash-table",
            "string",
            "backtracking",
            "breadth-first-search"
        ]
    },
    {
        "id": 127,
        "title": "Word Ladder",
        "difficulty": "Hard",
        "acceptance": "40.6%",
        "constraints": [
            "1 <= beginWord.length <= 10",
            "endWord.length == beginWord.length",
            "1 <= wordList.length <= 5000",
            "wordList[i].length == beginWord.length",
            "beginWord, endWord, and wordList[i] consist of lowercase English letters.",
            "beginWord != endWord",
            "All the words in wordList are unique."
        ],
        "description": "A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:\nEvery adjacent pair of words differs by a single letter.\nEvery si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\nsk == endWord\nGiven two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.",
        "examples": [
            {
                "input": "beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]",
                "output": "5",
                "explanation": "One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\", which is 5 words long."
            },
            {
                "input": "beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]",
                "output": "0",
                "explanation": "The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence."
            }
        ],
        "hints": [],
        "topics": [
            "hash-table",
            "string",
            "breadth-first-search"
        ]
    },
    {
        "id": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": "Medium",
        "acceptance": "47.5%",
        "constraints": [
            "0 <= nums.length <= 105",
            "-109 <= nums[i] <= 109"
        ],
        "description": "Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\nYou must write an algorithm that runs in O(n) time.",
        "examples": [
            {
                "input": "nums = [100,4,200,1,3,2]",
                "output": "4",
                "explanation": "The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4."
            },
            {
                "input": "nums = [0,3,7,2,5,8,4,6,0,1]",
                "output": "9",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "hash-table",
            "union-find"
        ]
    },
    {
        "id": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": "Medium",
        "acceptance": "66.9%",
        "constraints": [
            "The number of nodes in the tree is in the range [1, 1000].",
            "0 <= Node.val <= 9",
            "The depth of the tree will not exceed 10."
        ],
        "description": "You are given the root of a binary tree containing digits from 0 to 9 only.\nEach root-to-leaf path in the tree represents a number.\nFor example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.\nReturn the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.\nA leaf node is a node with no children.",
        "examples": [
            {
                "input": "root = [1,2,3]",
                "output": "25",
                "explanation": "The root-to-leaf path 1->2 represents the number 12.\nThe root-to-leaf path 1->3 represents the number 13.\nTherefore, sum = 12 + 13 = 25."
            },
            {
                "input": "root = [4,9,0,5,1]",
                "output": "1026",
                "explanation": "The root-to-leaf path 4->9->5 represents the number 495.\nThe root-to-leaf path 4->9->1 represents the number 491.\nThe root-to-leaf path 4->0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026."
            }
        ],
        "hints": [],
        "topics": [
            "tree",
            "depth-first-search",
            "binary-tree"
        ]
    },
    {
        "id": 130,
        "title": "Surrounded Regions",
        "difficulty": "Medium",
        "acceptance": "40.9%",
        "constraints": [
            "m == board.length",
            "n == board[i].length",
            "1 <= m, n <= 200",
            "board[i][j] is 'X' or 'O'."
        ],
        "description": "You are given an m x n matrix board containing letters 'X' and 'O', capture regions that are surrounded:\nConnect: A cell is connected to adjacent cells horizontally or vertically.\nRegion: To form a region connect every 'O' cell.\nSurround: The region is surrounded with 'X' cells if you can connect the region with 'X' cells and none of the region cells are on the edge of the board.\nA surrounded region is captured by replacing all 'O's with 'X's in the input matrix board.",
        "examples": [
            {
                "input": "board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]",
                "output": "[[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]",
                "explanation": "In the above diagram, the bottom region is not captured because it is on the edge of the board and cannot be surrounded."
            },
            {
                "input": "board = [[\"X\"]]",
                "output": "[[\"X\"]]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "depth-first-search",
            "breadth-first-search",
            "union-find",
            "matrix"
        ]
    },
    {
        "id": 131,
        "title": "Palindrome Partitioning",
        "difficulty": "Medium",
        "acceptance": "70.4%",
        "constraints": [
            "1 <= s.length <= 16",
            "s contains only lowercase English letters."
        ],
        "description": "Given a string s, partition s such that every\nsubstring\nof the partition is a\npalindrome\n. Return all possible palindrome partitioning of s.",
        "examples": [
            {
                "input": "s = \"aab\"",
                "output": "[[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]",
                "explanation": ""
            },
            {
                "input": "s = \"a\"",
                "output": "[[\"a\"]]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "string",
            "dynamic-programming",
            "backtracking"
        ]
    },
    {
        "id": 132,
        "title": "Palindrome Partitioning II",
        "difficulty": "Hard",
        "acceptance": "34.4%",
        "constraints": [
            "1 <= s.length <= 2000",
            "s consists of lowercase English letters only."
        ],
        "description": "Given a string s, partition s such that every\nsubstring\nof the partition is a\npalindrome\n.\nReturn the minimum cuts needed for a palindrome partitioning of s.",
        "examples": [
            {
                "input": "s = \"aab\"",
                "output": "1",
                "explanation": "The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut."
            },
            {
                "input": "s = \"a\"",
                "output": "0",
                "explanation": ""
            },
            {
                "input": "s = \"ab\"",
                "output": "1",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "string",
            "dynamic-programming"
        ]
    },
    {
        "id": 133,
        "title": "Clone Graph",
        "difficulty": "Medium",
        "acceptance": "59.3%",
        "constraints": [
            "The number of nodes in the graph is in the range [0, 100].",
            "1 <= Node.val <= 100",
            "Node.val is unique for each node.",
            "There are no repeated edges and no self-loops in the graph.",
            "The Graph is connected and all nodes can be visited starting from the given node."
        ],
        "description": "Given a reference of a node in a connected undirected graph.\nReturn a deep copy (clone) of the graph.\nEach node in the graph contains a value (int) and a list (List[Node]) of its neighbors.\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n}\n  Test case format:\nFor simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list.\nAn adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.\nThe given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.",
        "examples": [
            {
                "input": "adjList = [[2,4],[1,3],[2,4],[1,3]]",
                "output": "[[2,4],[1,3],[2,4],[1,3]]",
                "explanation": "There are 4 nodes in the graph.\n1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3)."
            },
            {
                "input": "adjList = [[]]",
                "output": "[[]]",
                "explanation": "Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors."
            },
            {
                "input": "adjList = []",
                "output": "[]",
                "explanation": "This an empty graph, it does not have any nodes."
            }
        ],
        "hints": [],
        "topics": [
            "hash-table",
            "depth-first-search",
            "breadth-first-search",
            "graph"
        ]
    },
    {
        "id": 134,
        "title": "Gas Station",
        "difficulty": "Medium",
        "acceptance": "45.6%",
        "constraints": [
            "n == gas.length == cost.length",
            "1 <= n <= 105",
            "0 <= gas[i], cost[i] <= 104"
        ],
        "description": "There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].\nYou have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.\nGiven two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique.",
        "examples": [
            {
                "input": "gas = [1,2,3,4,5], cost = [3,4,5,1,2]",
                "output": "3",
                "explanation": "Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 4. Your tank = 4 - 1 + 5 = 8\nTravel to station 0. Your tank = 8 - 2 + 1 = 7\nTravel to station 1. Your tank = 7 - 3 + 2 = 6\nTravel to station 2. Your tank = 6 - 4 + 3 = 5\nTravel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\nTherefore, return 3 as the starting index."
            },
            {
                "input": "gas = [2,3,4], cost = [3,4,3]",
                "output": "-1",
                "explanation": "You can't start at station 0 or 1, as there is not enough gas to travel to the next station.\nLet's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 0. Your tank = 4 - 3 + 2 = 3\nTravel to station 1. Your tank = 3 - 3 + 3 = 3\nYou cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\nTherefore, you can't travel around the circuit once no matter where you start."
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "greedy"
        ]
    },
    {
        "id": 135,
        "title": "Candy",
        "difficulty": "Hard",
        "acceptance": "43.9%",
        "constraints": [
            "n == ratings.length",
            "1 <= n <= 2 * 104",
            "0 <= ratings[i] <= 2 * 104"
        ],
        "description": "There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.\nYou are giving candies to these children subjected to the following requirements:\nEach child must have at least one candy.\nChildren with a higher rating get more candies than their neighbors.\nReturn the minimum number of candies you need to have to distribute the candies to the children.",
        "examples": [
            {
                "input": "ratings = [1,0,2]",
                "output": "5",
                "explanation": "You can allocate to the first, second and third child with 2, 1, 2 candies respectively."
            },
            {
                "input": "ratings = [1,2,2]",
                "output": "4",
                "explanation": "You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\nThe third child gets 1 candy because it satisfies the above two conditions."
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "greedy"
        ]
    },
    {
        "id": 136,
        "title": "Single Number",
        "difficulty": "Easy",
        "acceptance": "74.3%",
        "constraints": [
            "1 <= nums.length <= 3 * 104",
            "-3 * 104 <= nums[i] <= 3 * 104",
            "Each element in the array appears twice except for one element which appears only once."
        ],
        "description": "Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.\nYou must implement a solution with a linear runtime complexity and use only constant extra space.",
        "examples": [
            {
                "input": "nums = [2,2,1]",
                "output": "1",
                "explanation": ""
            },
            {
                "input": "nums = [4,1,2,1,2]",
                "output": "4",
                "explanation": ""
            },
            {
                "input": "nums = [1]",
                "output": "1",
                "explanation": ""
            }
        ],
        "hints": [
            "Think about the XOR (^) operator's property."
        ],
        "topics": [
            "array",
            "bit-manipulation"
        ]
    },
    {
        "id": 137,
        "title": "Single Number II",
        "difficulty": "Medium",
        "acceptance": "63.9%",
        "constraints": [
            "1 <= nums.length <= 3 * 104",
            "-231 <= nums[i] <= 231 - 1",
            "Each element in nums appears exactly three times except for one element which appears once."
        ],
        "description": "Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.\nYou must implement a solution with a linear runtime complexity and use only constant extra space.",
        "examples": [
            {
                "input": "nums = [2,2,3,2]",
                "output": "3",
                "explanation": ""
            },
            {
                "input": "nums = [0,1,0,1,0,1,99]",
                "output": "99",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "bit-manipulation"
        ]
    },
    {
        "id": 138,
        "title": "Copy List with Random Pointer",
        "difficulty": "Medium",
        "acceptance": "57.9%",
        "constraints": [
            "0 <= n <= 1000",
            "-104 <= Node.val <= 104",
            "Node.random is null or is pointing to some node in the linked list."
        ],
        "description": "A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.\nConstruct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.\nFor example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.\nReturn the head of the copied linked list.\nThe linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:\nval: an integer representing Node.val\nrandom_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.\nYour code will only be given the head of the original linked list.",
        "examples": [
            {
                "input": "head = [[7,null],[13,0],[11,4],[10,2],[1,0]]",
                "output": "[[7,null],[13,0],[11,4],[10,2],[1,0]]",
                "explanation": ""
            },
            {
                "input": "head = [[1,1],[2,1]]",
                "output": "[[1,1],[2,1]]",
                "explanation": ""
            },
            {
                "input": "head = [[3,null],[3,0],[3,null]]",
                "output": "[[3,null],[3,0],[3,null]]",
                "explanation": ""
            }
        ],
        "hints": [
            "Just iterate the linked list and create copies of the nodes on the go. Since a node can be referenced from multiple nodes due to the random pointers, ensure you are not making multiple copies of the same node.",
            "You may want to use extra space to keep old_node ---> new_node mapping to prevent creating multiple copies of the same node.",
            "We can avoid using extra space for old_node ---> new_node mapping by tweaking the original linked list. Simply interweave the nodes of the old and copied list. For example: Old List: A --> B --> C --> D InterWeaved List: A --> A' --> B --> B' --> C --> C' --> D --> D'",
            "The interweaving is done using next pointers and we can make use of interweaved structure to get the correct reference nodes for random pointers."
        ],
        "topics": [
            "hash-table",
            "linked-list"
        ]
    },
    {
        "id": 139,
        "title": "Word Break",
        "difficulty": "Medium",
        "acceptance": "47.3%",
        "constraints": [
            "1 <= s.length <= 300",
            "1 <= wordDict.length <= 1000",
            "1 <= wordDict[i].length <= 20",
            "s and wordDict[i] consist of only lowercase English letters.",
            "All the strings of wordDict are unique."
        ],
        "description": "Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.\nNote that the same word in the dictionary may be reused multiple times in the segmentation.",
        "examples": [
            {
                "input": "s = \"leetcode\", wordDict = [\"leet\",\"code\"]",
                "output": "true",
                "explanation": "Return true because \"leetcode\" can be segmented as \"leet code\"."
            },
            {
                "input": "s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]",
                "output": "true",
                "explanation": "Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\nNote that you are allowed to reuse a dictionary word."
            },
            {
                "input": "s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]",
                "output": "false",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "hash-table",
            "string",
            "dynamic-programming",
            "trie",
            "memoization"
        ]
    },
    {
        "id": 140,
        "title": "Word Break II",
        "difficulty": "Hard",
        "acceptance": "51.9%",
        "constraints": [
            "1 <= s.length <= 20",
            "1 <= wordDict.length <= 1000",
            "1 <= wordDict[i].length <= 10",
            "s and wordDict[i] consist of only lowercase English letters.",
            "All the strings of wordDict are unique.",
            "Input is generated in a way that the length of the answer doesn't exceed 105."
        ],
        "description": "Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.\nNote that the same word in the dictionary may be reused multiple times in the segmentation.",
        "examples": [
            {
                "input": "s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]",
                "output": "[\"cats and dog\",\"cat sand dog\"]",
                "explanation": ""
            },
            {
                "input": "s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]",
                "output": "[\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]",
                "explanation": "Note that you are allowed to reuse a dictionary word."
            },
            {
                "input": "s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]",
                "output": "[]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "hash-table",
            "string",
            "dynamic-programming",
            "backtracking",
            "trie",
            "memoization"
        ]
    },
    {
        "id": 141,
        "title": "Linked List Cycle",
        "difficulty": "Easy",
        "acceptance": "51.2%",
        "constraints": [
            "The number of the nodes in the list is in the range [0, 104].",
            "-105 <= Node.val <= 105",
            "pos is -1 or a valid index in the linked-list.",
            "Follow up: Can you solve it using O(1) (i.e. constant) memory?"
        ],
        "description": "Given head, the head of a linked list, determine if the linked list has a cycle in it.\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.\nReturn true if there is a cycle in the linked list. Otherwise, return false.",
        "examples": [
            {
                "input": "head = [3,2,0,-4], pos = 1",
                "output": "true",
                "explanation": "There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed)."
            },
            {
                "input": "head = [1,2], pos = 0",
                "output": "true",
                "explanation": "There is a cycle in the linked list, where the tail connects to the 0th node."
            },
            {
                "input": "head = [1], pos = -1",
                "output": "false",
                "explanation": "There is no cycle in the linked list."
            }
        ],
        "hints": [],
        "topics": [
            "hash-table",
            "linked-list",
            "two-pointers"
        ]
    },
    {
        "id": 142,
        "title": "Linked List Cycle II",
        "difficulty": "Medium",
        "acceptance": "52.8%",
        "constraints": [
            "The number of the nodes in the list is in the range [0, 104].",
            "-105 <= Node.val <= 105",
            "pos is -1 or a valid index in the linked-list.",
            "Follow up: Can you solve it using O(1) (i.e. constant) memory?"
        ],
        "description": "Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.\nDo not modify the linked list.",
        "examples": [
            {
                "input": "head = [3,2,0,-4], pos = 1",
                "output": "tail connects to node index 1",
                "explanation": "There is a cycle in the linked list, where tail connects to the second node."
            },
            {
                "input": "head = [1,2], pos = 0",
                "output": "tail connects to node index 0",
                "explanation": "There is a cycle in the linked list, where tail connects to the first node."
            },
            {
                "input": "head = [1], pos = -1",
                "output": "no cycle",
                "explanation": "There is no cycle in the linked list."
            }
        ],
        "hints": [],
        "topics": [
            "hash-table",
            "linked-list",
            "two-pointers"
        ]
    },
    {
        "id": 143,
        "title": "Reorder List",
        "difficulty": "Medium",
        "acceptance": "60.3%",
        "constraints": [
            "The number of nodes in the list is in the range [1, 5 * 104].",
            "1 <= Node.val <= 1000"
        ],
        "description": "You are given the head of a singly linked-list. The list can be represented as:\nL0 → L1 → … → Ln - 1 → Ln\nReorder the list to be on the following form:\nL0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …\nYou may not modify the values in the list's nodes. Only nodes themselves may be changed.",
        "examples": [
            {
                "input": "head = [1,2,3,4]",
                "output": "[1,4,2,3]",
                "explanation": ""
            },
            {
                "input": "head = [1,2,3,4,5]",
                "output": "[1,5,2,4,3]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "linked-list",
            "two-pointers",
            "stack",
            "recursion"
        ]
    },
    {
        "id": 144,
        "title": "Binary Tree Preorder Traversal",
        "difficulty": "Easy",
        "acceptance": "71.1%",
        "constraints": [
            "The number of nodes in the tree is in the range [0, 100].",
            "-100 <= Node.val <= 100",
            "Follow up: Recursive solution is trivial, could you do it iteratively?"
        ],
        "description": "Given the root of a binary tree, return the preorder traversal of its nodes' values.",
        "examples": [
            {
                "input": "root = [1,null,2,3]",
                "output": "[1,2,3]",
                "explanation": ""
            },
            {
                "input": "root = [1,2,3,4,5,null,8,null,null,6,7,9]",
                "output": "[1,2,4,5,6,7,3,8,9]",
                "explanation": ""
            },
            {
                "input": "root = []",
                "output": "[]",
                "explanation": ""
            },
            {
                "input": "root = [1]",
                "output": "[1]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "stack",
            "tree",
            "depth-first-search",
            "binary-tree"
        ]
    },
    {
        "id": 145,
        "title": "Binary Tree Postorder Traversal",
        "difficulty": "Easy",
        "acceptance": "73.7%",
        "constraints": [
            "The number of the nodes in the tree is in the range [0, 100].",
            "-100 <= Node.val <= 100",
            "Follow up: Recursive solution is trivial, could you do it iteratively?"
        ],
        "description": "Given the root of a binary tree, return the postorder traversal of its nodes' values.",
        "examples": [
            {
                "input": "root = [1,null,2,3]",
                "output": "[3,2,1]",
                "explanation": ""
            },
            {
                "input": "root = [1,2,3,4,5,null,8,null,null,6,7,9]",
                "output": "[4,6,7,5,2,9,8,3,1]",
                "explanation": ""
            },
            {
                "input": "root = []",
                "output": "[]",
                "explanation": ""
            },
            {
                "input": "root = [1]",
                "output": "[1]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "stack",
            "tree",
            "depth-first-search",
            "binary-tree"
        ]
    },
    {
        "id": 146,
        "title": "LRU Cache",
        "difficulty": "Medium",
        "acceptance": "43.4%",
        "constraints": [
            "1 <= capacity <= 3000",
            "0 <= key <= 104",
            "0 <= value <= 105",
            "At most 2 * 105 calls will be made to get and put."
        ],
        "description": "Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.\nImplement the LRUCache class:\nLRUCache(int capacity) Initialize the LRU cache with positive size capacity.\nint get(int key) Return the value of the key if the key exists, otherwise return -1.\nvoid put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\nThe functions get and put must each run in O(1) average time complexity.",
        "examples": [
            {
                "input": "",
                "output": "",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "hash-table",
            "linked-list",
            "design",
            "doubly-linked-list"
        ]
    },
    {
        "id": 147,
        "title": "Insertion Sort List",
        "difficulty": "Medium",
        "acceptance": "54.7%",
        "constraints": [
            "The number of nodes in the list is in the range [1, 5000].",
            "-5000 <= Node.val <= 5000"
        ],
        "description": "Given the head of a singly linked list, sort the list using insertion sort, and return the sorted list's head.\nThe steps of the insertion sort algorithm:\nInsertion sort iterates, consuming one input element each repetition and growing a sorted output list.\nAt each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.\nIt repeats until no input elements remain.\nThe following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.",
        "examples": [
            {
                "input": "head = [4,2,1,3]",
                "output": "[1,2,3,4]",
                "explanation": ""
            },
            {
                "input": "head = [-1,5,3,4,0]",
                "output": "[-1,0,3,4,5]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "linked-list",
            "sorting"
        ]
    },
    {
        "id": 148,
        "title": "Sort List",
        "difficulty": "Medium",
        "acceptance": "59.7%",
        "constraints": [
            "The number of nodes in the list is in the range [0, 5 * 104].",
            "-105 <= Node.val <= 105",
            "Follow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?"
        ],
        "description": "Given the head of a linked list, return the list after sorting it in ascending order.",
        "examples": [
            {
                "input": "head = [4,2,1,3]",
                "output": "[1,2,3,4]",
                "explanation": ""
            },
            {
                "input": "head = [-1,5,3,4,0]",
                "output": "[-1,0,3,4,5]",
                "explanation": ""
            },
            {
                "input": "head = []",
                "output": "[]",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "linked-list",
            "two-pointers",
            "divide-and-conquer",
            "sorting",
            "merge-sort"
        ]
    },
    {
        "id": 149,
        "title": "Max Points on a Line",
        "difficulty": "Hard",
        "acceptance": "27.7%",
        "constraints": [
            "1 <= points.length <= 300",
            "points[i].length == 2",
            "-104 <= xi, yi <= 104",
            "All the points are unique."
        ],
        "description": "Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.",
        "examples": [
            {
                "input": "points = [[1,1],[2,2],[3,3]]",
                "output": "3",
                "explanation": ""
            },
            {
                "input": "points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]",
                "output": "4",
                "explanation": ""
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "hash-table",
            "math",
            "geometry"
        ]
    },
    {
        "id": 150,
        "title": "Evaluate Reverse Polish Notation",
        "difficulty": "Medium",
        "acceptance": "52.9%",
        "constraints": [
            "1 <= tokens.length <= 104",
            "tokens[i] is either an operator: \"+\", \"-\", \"*\", or \"/\", or an integer in the range [-200, 200]."
        ],
        "description": "You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.\nEvaluate the expression. Return an integer that represents the value of the expression.\nNote that:\nThe valid operators are '+', '-', '*', and '/'.\nEach operand may be an integer or another expression.\nThe division between two integers always truncates toward zero.\nThere will not be any division by zero.\nThe input represents a valid arithmetic expression in a reverse polish notation.\nThe answer and all the intermediate calculations can be represented in a 32-bit integer.",
        "examples": [
            {
                "input": "tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]",
                "output": "9",
                "explanation": "((2 + 1) * 3) = 9"
            },
            {
                "input": "tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]",
                "output": "6",
                "explanation": "(4 + (13 / 5)) = 6"
            },
            {
                "input": "tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]",
                "output": "22",
                "explanation": "((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22"
            }
        ],
        "hints": [],
        "topics": [
            "array",
            "math",
            "stack"
        ]
    }
]